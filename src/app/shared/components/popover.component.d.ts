import { AfterViewInit, ChangeDetectorRef, ComponentRef, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, Type, ViewContainerRef } from '@angular/core';
import { Direction, Directionality } from '@angular/cdk/bidi';
import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedOverlayPositionChange, ConnectionPositionPair, NoopScrollStrategy } from '@angular/cdk/overlay';
import { Subject } from 'rxjs';
import { PopoverPlacement, PopoverPreferredPlacement } from '@shared/components/popover.models';
import { AnimationBuilder } from '@angular/animations';
import * as i0 from "@angular/core";
export type TbPopoverTrigger = 'click' | 'focus' | 'hover' | null;
export declare class TbPopoverDirective implements OnChanges, OnDestroy, AfterViewInit {
    private elementRef;
    private hostView;
    private renderer;
    content?: string | TemplateRef<void>;
    context?: any | null;
    trigger?: TbPopoverTrigger;
    placement?: string | string[];
    origin?: ElementRef<HTMLElement>;
    visible?: boolean;
    showCloseButton: boolean;
    mouseEnterDelay?: number;
    mouseLeaveDelay?: number;
    overlayClassName?: string;
    overlayStyle?: {
        [klass: string]: any;
    };
    tbPopoverBackdrop: boolean;
    readonly visibleChange: EventEmitter<boolean>;
    component?: TbPopoverComponent;
    private readonly destroy$;
    private readonly triggerDisposables;
    private delayTimer?;
    private internalVisible;
    constructor(elementRef: ElementRef, hostView: ViewContainerRef, renderer: Renderer2);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    show(): void;
    hide(): void;
    updatePosition(): void;
    private createComponent;
    private registerTriggers;
    private updatePropertiesByChanges;
    private updatePropertiesByKeys;
    private initProperties;
    private updateComponentValue;
    private delayEnterLeave;
    private removeTriggerListeners;
    private clearTogglingTimer;
    static ɵfac: i0.ɵɵFactoryDeclaration<TbPopoverDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TbPopoverDirective, "[tb-popover]", ["tbPopover"], { "content": { "alias": "tbPopoverContent"; "required": false; }; "context": { "alias": "tbPopoverContext"; "required": false; }; "trigger": { "alias": "tbPopoverTrigger"; "required": false; }; "placement": { "alias": "tbPopoverPlacement"; "required": false; }; "origin": { "alias": "tbPopoverOrigin"; "required": false; }; "visible": { "alias": "tbPopoverVisible"; "required": false; }; "showCloseButton": { "alias": "tbPopoverShowCloseButton"; "required": false; }; "mouseEnterDelay": { "alias": "tbPopoverMouseEnterDelay"; "required": false; }; "mouseLeaveDelay": { "alias": "tbPopoverMouseLeaveDelay"; "required": false; }; "overlayClassName": { "alias": "tbPopoverOverlayClassName"; "required": false; }; "overlayStyle": { "alias": "tbPopoverOverlayStyle"; "required": false; }; "tbPopoverBackdrop": { "alias": "tbPopoverBackdrop"; "required": false; }; }, { "visibleChange": "tbPopoverVisibleChange"; }, never, never, false, never>;
}
export declare class TbPopoverComponent<T = any> implements OnDestroy, OnInit {
    cdr: ChangeDetectorRef;
    private renderer;
    private animationBuilder;
    private directionality;
    overlay: CdkConnectedOverlay;
    popoverRoot: ElementRef<HTMLElement>;
    popover: ElementRef<HTMLElement>;
    tbContent: string | TemplateRef<void> | null;
    tbComponent: Type<T> | null;
    tbComponentRef: ComponentRef<T> | null;
    tbComponentContext: any;
    tbComponentInjector: Injector | null;
    tbComponentStyle: {
        [klass: string]: any;
    };
    tbOverlayClassName: string;
    tbPopoverInnerStyle: {
        [klass: string]: any;
    };
    tbPopoverInnerContentStyle: {
        [klass: string]: any;
    };
    tbBackdrop: boolean;
    tbMouseEnterDelay?: number;
    tbMouseLeaveDelay?: number;
    tbHideOnClickOutside: boolean;
    tbShowCloseButton: boolean;
    tbModal: boolean;
    tbAnimationState: string;
    tbHideStart: Subject<void>;
    tbVisibleChange: Subject<boolean>;
    tbAnimationDone: Subject<void>;
    tbComponentChange: Subject<ComponentRef<any>>;
    tbDestroy: Subject<void>;
    set tbVisible(value: boolean);
    get tbVisible(): boolean;
    visible: boolean;
    set tbHidden(value: boolean);
    get tbHidden(): boolean;
    hidden: boolean;
    lastIsIntersecting: boolean;
    set tbTrigger(value: TbPopoverTrigger);
    get tbTrigger(): TbPopoverTrigger;
    protected trigger: TbPopoverTrigger;
    set tbPlacement(value: PopoverPreferredPlacement);
    get hasBackdrop(): boolean;
    get backdropClass(): string;
    set tbOverlayStyle(value: {
        [klass: string]: any;
    });
    get tbOverlayStyle(): {
        [klass: string]: any;
    };
    preferredPlacement: PopoverPlacement;
    strictPosition: boolean;
    origin: CdkOverlayOrigin;
    dir: Direction;
    classMap: {
        [klass: string]: any;
    };
    positions: ConnectionPositionPair[];
    scrollStrategy: NoopScrollStrategy;
    private parentScrollSubscription;
    private intersectionObserver;
    private _tbOverlayStyle;
    constructor(cdr: ChangeDetectorRef, renderer: Renderer2, animationBuilder: AnimationBuilder, directionality: Directionality);
    ngOnInit(): void;
    ngOnDestroy(): void;
    closeButtonClick($event: Event): void;
    show(): void;
    hide(): void;
    updateByDirective(): void;
    resize(width: string, height: string, animationDurationMs?: number): void;
    private setSize;
    updatePosition(): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    updateStyles(): void;
    setOverlayOrigin(origin: CdkOverlayOrigin): void;
    onClickOutside(event: MouseEvent): void;
    onComponentChange(component: ComponentRef<any>): void;
    animationDone(): void;
    private isTopOverlay;
    private updateVisibilityByContent;
    private isEmpty;
    static ɵfac: i0.ɵɵFactoryDeclaration<TbPopoverComponent<any>, [null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TbPopoverComponent<any>, "tb-popover", ["tbPopoverComponent"], {}, {}, never, never, false, never>;
}
