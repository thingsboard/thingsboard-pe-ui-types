import { ChangeDetectorRef, DestroyRef, ElementRef, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { DialogService } from '@core/services/dialog.service';
import { TbPopoverService } from '@shared/components/popover.service';
import * as i0 from "@angular/core";
export declare class ColorInputComponent extends PageComponent implements OnInit, ControlValueAccessor {
    protected store: Store<AppState>;
    private dialogs;
    private popoverService;
    private renderer;
    private viewContainerRef;
    private fb;
    private cd;
    private destroyRef;
    asBoxInput: boolean;
    icon: string;
    label: string;
    requiredText: string;
    colorClearButton: boolean;
    useThemePalette: boolean;
    disableAlpha: boolean;
    openOnInput: boolean;
    noBorder: boolean;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    readonly: boolean;
    private modelValue;
    private propagateChange;
    colorFormGroup: UntypedFormGroup;
    constructor(store: Store<AppState>, dialogs: DialogService, popoverService: TbPopoverService, renderer: Renderer2, viewContainerRef: ViewContainerRef, fb: UntypedFormBuilder, cd: ChangeDetectorRef, destroyRef: DestroyRef);
    ngOnInit(): void;
    updateValidators(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string): void;
    private updateModel;
    showColorPicker($event: MouseEvent): void;
    openColorPickerPopup($event: Event, element?: ElementRef): void;
    clear(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ColorInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ColorInputComponent, "tb-color-input", never, { "asBoxInput": { "alias": "asBoxInput"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "label": { "alias": "label"; "required": false; }; "requiredText": { "alias": "requiredText"; "required": false; }; "colorClearButton": { "alias": "colorClearButton"; "required": false; }; "useThemePalette": { "alias": "useThemePalette"; "required": false; }; "disableAlpha": { "alias": "disableAlpha"; "required": false; }; "openOnInput": { "alias": "openOnInput"; "required": false; }; "noBorder": { "alias": "noBorder"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; }, {}, never, never, false, never>;
}
