import { EventEmitter, InjectionToken, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { AggregationType, HistoryWindowType, Interval, QuickTimeInterval, RealtimeWindowType, Timewindow, TimewindowAdvancedParams, TimewindowType } from '@shared/models/time/time.models';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { TimeService } from '@core/services/time.service';
import { OverlayRef } from '@angular/cdk/overlay';
import { ToggleHeaderOption } from '@shared/components/toggle-header.component';
import { TranslateService } from '@ngx-translate/core';
import { MatDialog } from '@angular/material/dialog';
import * as i0 from "@angular/core";
export interface TimewindowPanelData {
    historyOnly: boolean;
    forAllTimeEnabled: boolean;
    quickIntervalOnly: boolean;
    timewindow: Timewindow;
    aggregation: boolean;
    timezone: boolean;
    isEdit: boolean;
    panelMode: boolean;
}
export declare const TIMEWINDOW_PANEL_DATA: InjectionToken<any>;
export declare class TimewindowPanelComponent extends PageComponent implements OnInit, OnDestroy {
    data: TimewindowPanelData;
    overlayRef: OverlayRef;
    protected store: Store<AppState>;
    fb: UntypedFormBuilder;
    private timeService;
    private translate;
    viewContainerRef: ViewContainerRef;
    private dialog;
    width: string;
    changeTimewindow: EventEmitter<Timewindow>;
    historyOnly: boolean;
    forAllTimeEnabled: boolean;
    quickIntervalOnly: boolean;
    aggregation: boolean;
    timezone: boolean;
    isEdit: boolean;
    panelMode: boolean;
    timewindow: Timewindow;
    timewindowForm: UntypedFormGroup;
    historyTypes: typeof HistoryWindowType;
    realtimeTypes: typeof RealtimeWindowType;
    timewindowTypes: typeof TimewindowType;
    aggregationTypes: typeof AggregationType;
    result: Timewindow;
    timewindowTypeOptions: ToggleHeaderOption[];
    realtimeTimewindowOptions: ToggleHeaderOption[];
    historyTimewindowOptions: ToggleHeaderOption[];
    realtimeTypeSelectionAvailable: boolean;
    realtimeIntervalSelectionAvailable: boolean;
    historyTypeSelectionAvailable: boolean;
    historyIntervalSelectionAvailable: boolean;
    aggregationOptionsAvailable: boolean;
    realtimeDisableCustomInterval: boolean;
    realtimeDisableCustomGroupInterval: boolean;
    historyDisableCustomInterval: boolean;
    historyDisableCustomGroupInterval: boolean;
    realtimeAdvancedParams: TimewindowAdvancedParams;
    realtimeAllowedLastIntervals: Array<Interval>;
    realtimeAllowedQuickIntervals: Array<QuickTimeInterval>;
    historyAdvancedParams: TimewindowAdvancedParams;
    historyAllowedLastIntervals: Array<Interval>;
    historyAllowedQuickIntervals: Array<QuickTimeInterval>;
    allowedAggTypes: Array<AggregationType>;
    private destroy$;
    constructor(data: TimewindowPanelData, overlayRef: OverlayRef, store: Store<AppState>, fb: UntypedFormBuilder, timeService: TimeService, translate: TranslateService, viewContainerRef: ViewContainerRef, dialog: MatDialog);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private updateValidators;
    private onTimewindowTypeChange;
    update(): void;
    private prepareTimewindowConfig;
    private updateTimewindowForm;
    cancel(): void;
    get minRealtimeAggInterval(): number;
    get maxRealtimeAggInterval(): number;
    private currentRealtimeTimewindow;
    get minHistoryAggInterval(): number;
    get maxHistoryAggInterval(): number;
    private currentHistoryTimewindow;
    get realtimeAllowedAggIntervals(): Array<Interval>;
    get historyAllowedAggIntervals(): Array<Interval>;
    openTimewindowConfig(): void;
    private updateTimewindowAdvancedParams;
    static ɵfac: i0.ɵɵFactoryDeclaration<TimewindowPanelComponent, [null, { optional: true; }, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TimewindowPanelComponent, "tb-timewindow-panel", never, {}, { "changeTimewindow": "changeTimewindow"; }, never, never, false, never>;
}
