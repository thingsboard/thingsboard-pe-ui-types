import { ElementRef, OnChanges, OnInit, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { AllMeasures, TbUnit, UnitInfo, UnitSystem } from '@shared/models/unit.models';
import { UnitService } from '@core/services/unit.service';
import { TbPopoverService } from '@shared/components/popover.service';
import * as i0 from "@angular/core";
export declare class UnitInputComponent implements ControlValueAccessor, OnInit, OnChanges {
    private fb;
    private unitService;
    private popoverService;
    private renderer;
    private viewContainerRef;
    private elementRef;
    readonly hostDisplay = "flex";
    unitInput: ElementRef;
    unitsFormControl: FormControl<TbUnit | UnitInfo>;
    disabled: boolean;
    required: boolean;
    tagFilter: string;
    measure: AllMeasures;
    unitSystem: UnitSystem;
    supportsUnitConversion: boolean;
    onlySystemUnits: boolean;
    filteredUnits$: Observable<Array<[AllMeasures, Array<UnitInfo>]>>;
    searchText: string;
    isUnitMapping: boolean;
    private dirty;
    private modelValue;
    private fetchUnits$;
    private propagateChange;
    constructor(fb: FormBuilder, unitService: UnitService, popoverService: TbPopoverService, renderer: Renderer2, viewContainerRef: ViewContainerRef, elementRef: ElementRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(symbol?: TbUnit): void;
    onFocus(): void;
    displayUnitFn(unit?: TbUnit | UnitInfo): string | undefined;
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    clear($event: Event): void;
    openUnitSettingsPopup($event: Event): void;
    private updateModel;
    private fetchUnits;
    private getGroupedUnits;
    static ɵfac: i0.ɵɵFactoryDeclaration<UnitInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UnitInputComponent, "tb-unit-input", never, { "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; "tagFilter": { "alias": "tagFilter"; "required": false; }; "measure": { "alias": "measure"; "required": false; }; "unitSystem": { "alias": "unitSystem"; "required": false; }; "supportsUnitConversion": { "alias": "supportsUnitConversion"; "required": false; }; "onlySystemUnits": { "alias": "onlySystemUnits"; "required": false; }; }, {}, never, never, false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_supportsUnitConversion: unknown;
    static ngAcceptInputType_onlySystemUnits: unknown;
}
