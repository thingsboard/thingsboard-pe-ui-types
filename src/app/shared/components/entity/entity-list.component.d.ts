import { ElementRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup, ValidationErrors } from '@angular/forms';
import { Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { EntityType } from '@shared/models/entity-type.models';
import { BaseData } from '@shared/models/base-data';
import { EntityId } from '@shared/models/id/entity-id';
import { EntityService } from '@core/http/entity.service';
import { MatAutocomplete } from '@angular/material/autocomplete';
import { MatChipGrid } from '@angular/material/chips';
import { MatFormFieldAppearance, SubscriptSizing } from '@angular/material/form-field';
import { EntityInfoData } from '@shared/models/entity.models';
import * as i0 from "@angular/core";
export declare class EntityListComponent implements ControlValueAccessor, OnInit, OnChanges {
    private translate;
    private entityService;
    private fb;
    entityListFormGroup: UntypedFormGroup;
    private modelValue;
    fetchEntitiesFunction: (searchText?: string) => Observable<Array<BaseData<EntityId>>>;
    appearance: MatFormFieldAppearance;
    entityType: EntityType;
    entitySubType: string;
    entityListText: string;
    noEntitiesText: string;
    entitiesRequiredText: string;
    labelText: string;
    placeholderText: any;
    requiredText: any;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    subscriptSizing: SubscriptSizing;
    hint: string;
    syncIdsWithDB: boolean;
    inlineField: boolean;
    entityInput: ElementRef<HTMLInputElement>;
    matAutocomplete: MatAutocomplete;
    chipList: MatChipGrid;
    entities: Array<BaseData<EntityId>>;
    filteredEntities: Observable<Array<BaseData<EntityId>>>;
    searchText: string;
    private dirty;
    private propagateChange;
    constructor(translate: TranslateService, entityService: EntityService, fb: UntypedFormBuilder);
    private updateValidators;
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: Array<string> | Array<EntityInfoData> | null): void;
    validate(): ValidationErrors | null;
    private reset;
    private add;
    remove(entity: BaseData<EntityId>): void;
    displayEntityFn(entity?: BaseData<EntityId>): string | undefined;
    private fetchEntities;
    onFocus(): void;
    private clear;
    get placeholder(): string;
    get requiredLabel(): string;
    textIsNotEmpty(text: string): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<EntityListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EntityListComponent, "tb-entity-list", never, { "fetchEntitiesFunction": { "alias": "fetchEntitiesFunction"; "required": false; }; "appearance": { "alias": "appearance"; "required": false; }; "entityType": { "alias": "entityType"; "required": false; }; "entitySubType": { "alias": "entitySubType"; "required": false; }; "entityListText": { "alias": "entityListText"; "required": false; }; "noEntitiesText": { "alias": "noEntitiesText"; "required": false; }; "entitiesRequiredText": { "alias": "entitiesRequiredText"; "required": false; }; "labelText": { "alias": "labelText"; "required": false; }; "placeholderText": { "alias": "placeholderText"; "required": false; }; "requiredText": { "alias": "requiredText"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "subscriptSizing": { "alias": "subscriptSizing"; "required": false; }; "hint": { "alias": "hint"; "required": false; }; "syncIdsWithDB": { "alias": "syncIdsWithDB"; "required": false; }; "inlineField": { "alias": "inlineField"; "required": false; }; }, {}, never, ["[matSuffix]"], false, never>;
}
