import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { MatFormFieldAppearance, SubscriptSizing } from '@angular/material/form-field';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@app/core/core.state';
import { EntityType } from '@shared/models/entity-type.models';
import { BaseData } from '@shared/models/base-data';
import { EntityId } from '@shared/models/id/entity-id';
import { EntityService } from '@core/http/entity.service';
import * as i0 from "@angular/core";
export declare class EntityAutocompleteComponent implements ControlValueAccessor, OnInit {
    private store;
    private entityService;
    private fb;
    selectEntityFormGroup: UntypedFormGroup;
    private modelValue;
    private entityTypeValue;
    private entitySubtypeValue;
    private entityText;
    noEntitiesMatchingText: string;
    notFoundEntities: string;
    private entityRequiredText;
    filteredEntities: Observable<Array<BaseData<EntityId>>>;
    searchText: string;
    entityURL: string;
    private dirty;
    private refresh$;
    private propagateChange;
    set entityType(entityType: EntityType);
    set entitySubtype(entitySubtype: string);
    excludeEntityIds: Array<string>;
    labelText: string;
    requiredText: string;
    placeholder: string;
    useFullEntityId: boolean;
    appearance: MatFormFieldAppearance;
    inlineField: boolean;
    required: boolean;
    disabled: boolean;
    allowCreateNew: boolean;
    subscriptSizing: SubscriptSizing;
    additionalClasses: Array<string>;
    entityChanged: EventEmitter<BaseData<EntityId>>;
    createNew: EventEmitter<void>;
    entityInput: ElementRef;
    get requiredErrorText(): string;
    get label(): string;
    constructor(store: Store<AppState>, entityService: EntityService, fb: UntypedFormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    ngOnInit(): void;
    private load;
    private getCurrentEntity;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string | EntityId | null): Promise<void>;
    onFocus(): void;
    private reset;
    private updateView;
    displayEntityFn(entity?: BaseData<EntityId>): string | undefined;
    private fetchEntities;
    textIsNotEmpty(text: string): boolean;
    clear(): void;
    private checkEntityType;
    createNewEntity($event: Event): void;
    get showEntityLink(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<EntityAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EntityAutocompleteComponent, "tb-entity-autocomplete", never, { "entityType": { "alias": "entityType"; "required": false; }; "entitySubtype": { "alias": "entitySubtype"; "required": false; }; "excludeEntityIds": { "alias": "excludeEntityIds"; "required": false; }; "labelText": { "alias": "labelText"; "required": false; }; "requiredText": { "alias": "requiredText"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "useFullEntityId": { "alias": "useFullEntityId"; "required": false; }; "appearance": { "alias": "appearance"; "required": false; }; "inlineField": { "alias": "inlineField"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "allowCreateNew": { "alias": "allowCreateNew"; "required": false; }; "subscriptSizing": { "alias": "subscriptSizing"; "required": false; }; "additionalClasses": { "alias": "additionalClasses"; "required": false; }; }, { "entityChanged": "entityChanged"; "createNew": "createNew"; }, never, never, false, never>;
}
