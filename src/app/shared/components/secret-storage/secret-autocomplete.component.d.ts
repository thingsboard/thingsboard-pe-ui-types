import { ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { SecretStorage, SecretStorageType } from '@shared/models/secret-storage.models';
import { SecretStorageService } from '@core/http/secret-storage.service';
import * as i0 from "@angular/core";
export declare class SecretAutocompleteComponent implements ControlValueAccessor, OnInit {
    private secretStorageService;
    private fb;
    selectSecretFormGroup: FormGroup;
    private modelValue;
    secretType: SecretStorageType;
    required: boolean;
    disabled: boolean;
    converterInput: ElementRef<HTMLInputElement>;
    converterAutocomplete: MatAutocompleteTrigger;
    labelText: string;
    requiredText: string;
    filteredEntities: Observable<Array<SecretStorage>>;
    selectedSecret: string;
    searchText: string;
    private dirty;
    private propagateChange;
    constructor(secretStorageService: SecretStorageService, fb: FormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    ngOnInit(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string | null): void;
    onFocus(): void;
    private updateView;
    displayEntityFn(secret?: SecretStorage): string | undefined;
    private fetchEntities;
    clear(): void;
    textIsNotEmpty(text: string): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SecretAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SecretAutocompleteComponent, "tb-secret-autocomplete", never, { "secretType": { "alias": "secretType"; "required": true; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, {}, never, never, false, never>;
    static ngAcceptInputType_required: unknown;
}
