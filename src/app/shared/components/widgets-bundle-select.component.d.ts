import { ChangeDetectorRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@app/core/core.state';
import { WidgetsBundle } from '@shared/models/widgets-bundle.model';
import { WidgetService } from '@core/http/widget.service';
import { MatDialog } from '@angular/material/dialog';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import * as i0 from "@angular/core";
export declare class WidgetsBundleSelectComponent implements ControlValueAccessor, OnInit, OnChanges {
    private store;
    private widgetService;
    private dialog;
    private userPermissionsService;
    private cd;
    bundlesScope: 'system' | 'tenant';
    selectFirstBundle: boolean;
    selectBundleAlias: string;
    required: boolean;
    disabled: boolean;
    excludeBundleIds: Array<string>;
    createNew: boolean;
    widgetsBundles$: Observable<Array<WidgetsBundle>>;
    widgetsBundles: Array<WidgetsBundle>;
    widgetsBundle: WidgetsBundle | null;
    onTouched: () => void;
    private propagateChange;
    constructor(store: Store<AppState>, widgetService: WidgetService, dialog: MatDialog, userPermissionsService: UserPermissionsService, cd: ChangeDetectorRef);
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: WidgetsBundle | null): void;
    widgetsBundleChanged(): void;
    isSystem(item: WidgetsBundle): boolean;
    private selectWidgetsBundleByAlias;
    private updateView;
    private getWidgetsBundles;
    compareById(f1: WidgetsBundle, f2: WidgetsBundle): boolean;
    openWidgetsBundleDialog($event: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetsBundleSelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WidgetsBundleSelectComponent, "tb-widgets-bundle-select", never, { "bundlesScope": { "alias": "bundlesScope"; "required": false; }; "selectFirstBundle": { "alias": "selectFirstBundle"; "required": false; }; "selectBundleAlias": { "alias": "selectBundleAlias"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "excludeBundleIds": { "alias": "excludeBundleIds"; "required": false; }; "createNew": { "alias": "createNew"; "required": false; }; }, {}, never, never, false, never>;
}
