import { ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { FloatLabelType, MatFormFieldAppearance, SubscriptSizing } from '@angular/material/form-field';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { ReportTemplateInfo, ReportTemplateType, TbReportFormat } from '@shared/models/report.models';
import { ReportTemplateService } from '@core/http/report-template.service';
import { ReportTemplateId } from '@shared/models/id/report-template-id';
import { Router } from '@angular/router';
import * as i0 from "@angular/core";
export declare class ReportTemplateAutocompleteComponent implements ControlValueAccessor, OnInit {
    translate: TranslateService;
    private reportTemplateService;
    private router;
    private fb;
    private dirty;
    selectReportTemplateFormGroup: UntypedFormGroup;
    modelValue: ReportTemplateId | null;
    type: ReportTemplateType;
    format: TbReportFormat;
    floatLabel: FloatLabelType;
    appearance: MatFormFieldAppearance;
    subscriptSizing: SubscriptSizing;
    inlineField: boolean;
    required: boolean;
    disabled: boolean;
    placeholder: string;
    newTabDetailsButton: boolean;
    reportTemplateInput: ElementRef;
    reportTemplateAutocomplete: MatAutocompleteTrigger;
    filteredReportTemplates: Observable<Array<ReportTemplateInfo>>;
    searchText: string;
    reportTemplateURL: string;
    labelTranslationKey: string;
    placeholderTranslationKey: string;
    openNewTabTranslationKey: string;
    noReportTemplatesTranslationKey: string;
    noReportTemplatesMatchingTranslationKey: string;
    reportTemplateRequiredTranslationKey: string;
    private propagateChange;
    constructor(translate: TranslateService, reportTemplateService: ReportTemplateService, router: Router, fb: UntypedFormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    ngOnInit(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: ReportTemplateId | null): void;
    updateView(value: ReportTemplateId | null): void;
    displayReportTemplateFn(reportTemplate?: ReportTemplateInfo): string | undefined;
    private fetchReportTemplates;
    private getReportTemplates;
    onFocus(): void;
    clear(): void;
    textIsNotEmpty(text: string): boolean;
    openReportTemplateNewTab($event: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReportTemplateAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ReportTemplateAutocompleteComponent, "tb-report-template-autocomplete", never, { "type": { "alias": "type"; "required": false; }; "format": { "alias": "format"; "required": false; }; "floatLabel": { "alias": "floatLabel"; "required": false; }; "appearance": { "alias": "appearance"; "required": false; }; "subscriptSizing": { "alias": "subscriptSizing"; "required": false; }; "inlineField": { "alias": "inlineField"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "newTabDetailsButton": { "alias": "newTabDetailsButton"; "required": false; }; }, {}, never, ["[tb-error]", "[tb-hint]"], false, never>;
}
