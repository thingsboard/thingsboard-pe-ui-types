import { HttpClient } from '@angular/common/http';
import { UtilsService } from '@core/services/utils.service';
import { DashboardReportParams, DashboardReportType } from '@shared/models/dashboard-report.models';
import { Timewindow } from '@shared/models/time/time.models';
import { Observable, Subject } from 'rxjs';
import { Router } from '@angular/router';
import { AuthService } from '@core/auth/auth.service';
import { CmdUpdateMsg } from '@shared/models/telemetry/telemetry.models';
import { CmdWrapper } from '@shared/models/websocket/websocket.models';
import * as i0 from "@angular/core";
export declare class DashboardReportService {
    private window;
    private document;
    private utils;
    private http;
    private router;
    private authService;
    reportView: boolean;
    reportTimewindow: Timewindow;
    openReportSubject: Subject<void>;
    accessToken: string;
    publicId: string;
    private readonly onWindowMessageListener;
    private receiveWsData;
    private lastWsCommandTimeMs;
    private waitForWidgets;
    private lastWaitWidgetTimeMs;
    private widgetsCount;
    private lastWaitWidgetsTimeMs;
    constructor(window: Window, document: Document, utils: UtilsService, http: HttpClient, router: Router, authService: AuthService);
    loadReportParams(): boolean;
    onSendWsCommands(cmds: CmdWrapper): void;
    onWsCmdUpdateMessage(message: CmdUpdateMsg): void;
    onDashboardLoaded(widgetsCount: number): void;
    onWaitForMap(): string;
    onWaitForWidget(): string;
    onMapLoaded(uuid: string): void;
    onWidgetLoaded(uuid: string): void;
    downloadDashboardReport(dashboardId: string, reportType: DashboardReportType, state?: string, timewindow?: Timewindow): Observable<any>;
    downloadTestReport(reportConfig: DashboardReportParams, reportsServerEndpointUrl?: string): Observable<any>;
    private onWindowMessage;
    private postReportResult;
    private openReport;
    private pageHeight;
    private waitForLayoutReady;
    private waitForReportPage;
    private waitForWebsocketData;
    private waitWidgets;
    private waitForWidgetsLoaded;
    private isReportPageDomReady;
    private clearReport;
    private loadUser;
    private downloadReport;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardReportService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DashboardReportService>;
}
