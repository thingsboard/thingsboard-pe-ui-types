import { HttpClient } from '@angular/common/http';
import { RequestConfig } from '@core/http/http-utils';
import { Observable } from 'rxjs';
import { PageLink } from '@shared/models/page/page-link';
import { PageData } from '@shared/models/page/page-data';
import { Notification, NotificationDeliveryMethod, NotificationRequest, NotificationRequestInfo, NotificationRequestPreview, NotificationRule, NotificationSettings, NotificationTarget, NotificationTemplate, NotificationType, NotificationUserSettings, SlackChanelType, SlackConversation } from '@shared/models/notification.models';
import { User } from '@shared/models/user.model';
import * as i0 from "@angular/core";
export declare class NotificationService {
    private http;
    constructor(http: HttpClient);
    getNotifications(pageLink: PageLink, unreadOnly?: boolean, config?: RequestConfig): Observable<PageData<Notification>>;
    deleteNotification(id: string, config?: RequestConfig): Observable<void>;
    markNotificationAsRead(id: string, config?: RequestConfig): Observable<void>;
    markAllNotificationsAsRead(config?: RequestConfig): Observable<void>;
    createNotificationRequest(notification: NotificationRequest, config?: RequestConfig): Observable<NotificationRequest>;
    getNotificationRequestById(id: string, config?: RequestConfig): Observable<NotificationRequest>;
    getAvailableDeliveryMethods(config?: RequestConfig): Observable<Array<NotificationDeliveryMethod>>;
    deleteNotificationRequest(id: string, config?: RequestConfig): Observable<void>;
    getNotificationRequestPreview(notification: NotificationRequest, config?: RequestConfig): Observable<NotificationRequestPreview>;
    getNotificationRequests(pageLink: PageLink, config?: RequestConfig): Observable<PageData<NotificationRequestInfo>>;
    getNotificationSettings(config?: RequestConfig): Observable<NotificationSettings>;
    saveNotificationSettings(notificationSettings: NotificationSettings, config?: RequestConfig): Observable<NotificationSettings>;
    listSlackConversations(type: SlackChanelType, token?: string, config?: RequestConfig): Observable<Array<SlackConversation>>;
    saveNotificationRule(notificationRule: NotificationRule, config?: RequestConfig): Observable<NotificationRule>;
    getNotificationRuleById(id: string, config?: RequestConfig): Observable<NotificationRule>;
    deleteNotificationRule(id: string, config?: RequestConfig): Observable<void>;
    getNotificationRules(pageLink: PageLink, config?: RequestConfig): Observable<PageData<NotificationRule>>;
    saveNotificationTarget(notificationTarget: NotificationTarget, config?: RequestConfig): Observable<NotificationTarget>;
    getNotificationTargetById(id: string, config?: RequestConfig): Observable<NotificationTarget>;
    deleteNotificationTarget(id: string, config?: RequestConfig): Observable<void>;
    getNotificationTargetsByIds(ids: string[], config?: RequestConfig): Observable<Array<NotificationTarget>>;
    getNotificationTargets(pageLink: PageLink, type?: NotificationType, config?: RequestConfig): Observable<PageData<NotificationTarget>>;
    getRecipientsForNotificationTargetConfig(notificationTarget: NotificationTarget, pageLink: PageLink, config?: RequestConfig): Observable<PageData<User>>;
    saveNotificationTemplate(notificationTarget: NotificationTemplate, config?: RequestConfig): Observable<NotificationTemplate>;
    getNotificationTemplateById(id: string, config?: RequestConfig): Observable<NotificationTemplate>;
    deleteNotificationTemplate(id: string, config?: RequestConfig): Observable<void>;
    getNotificationTemplates(pageLink: PageLink, notificationTypes?: NotificationType, config?: RequestConfig): Observable<PageData<NotificationTemplate>>;
    getNotificationUserSettings(config?: RequestConfig): Observable<NotificationUserSettings>;
    saveNotificationUserSettings(settings: NotificationUserSettings, config?: RequestConfig): Observable<NotificationUserSettings>;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NotificationService>;
}
