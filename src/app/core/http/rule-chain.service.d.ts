import { Type } from '@angular/core';
import { RequestConfig } from './http-utils';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { PageLink } from '@shared/models/page/page-link';
import { PageData } from '@shared/models/page/page-data';
import { RuleChain, RuleChainMetaData, RuleChainType } from '@shared/models/rule-chain.models';
import { ComponentDescriptorService } from './component-descriptor.service';
import { IRuleNodeConfigurationComponent, LinkLabel, RuleNodeComponentDescriptor, RuleNodeConfiguration, ScriptLanguage, TestScriptInputParams, TestScriptResult } from '@app/shared/models/rule-node.models';
import { ResourcesService } from '../services/resources.service';
import { TranslateService } from '@ngx-translate/core';
import { DebugRuleNodeEventBody } from '@app/shared/models/event.models';
import { Edge } from '@shared/models/edge.models';
import { IModulesMap } from '@modules/common/modules-map.models';
import * as i0 from "@angular/core";
export declare class RuleChainService {
    private http;
    private componentDescriptorService;
    private resourcesService;
    private translate;
    private ruleNodeComponentsMap;
    private ruleNodeConfigComponents;
    constructor(http: HttpClient, componentDescriptorService: ComponentDescriptorService, resourcesService: ResourcesService, translate: TranslateService);
    getRuleChains(pageLink: PageLink, type?: RuleChainType, config?: RequestConfig): Observable<PageData<RuleChain>>;
    getRuleChainsByIds(ruleChainIds: Array<string>, config?: RequestConfig): Observable<Array<RuleChain>>;
    getRuleChain(ruleChainId: string, config?: RequestConfig): Observable<RuleChain>;
    getRuleChainOutputLabels(ruleChainId: string, config?: RequestConfig): Observable<Array<string>>;
    createDefaultRuleChain(ruleChainName: string, config?: RequestConfig): Observable<RuleChain>;
    saveRuleChain(ruleChain: RuleChain, config?: RequestConfig): Observable<RuleChain>;
    deleteRuleChain(ruleChainId: string, config?: RequestConfig): Observable<Object>;
    setRootRuleChain(ruleChainId: string, config?: RequestConfig): Observable<RuleChain>;
    getRuleChainMetadata(ruleChainId: string, config?: RequestConfig): Observable<RuleChainMetaData>;
    saveRuleChainMetadata(ruleChainMetaData: RuleChainMetaData, config?: RequestConfig): Observable<RuleChainMetaData>;
    getRuleNodeComponents(modulesMap: IModulesMap, ruleChainType: RuleChainType, config?: RequestConfig): Observable<Array<RuleNodeComponentDescriptor>>;
    getRuleNodeConfigComponent(directive: string): Type<IRuleNodeConfigurationComponent>;
    getRuleNodeComponentByClazz(ruleChainType: RuleChainType, clazz: string): RuleNodeComponentDescriptor;
    getRuleNodeSupportedLinks(component: RuleNodeComponentDescriptor): {
        [label: string]: LinkLabel;
    };
    ruleNodeAllowCustomLinks(component: RuleNodeComponentDescriptor): boolean;
    ruleNodeSourceRuleChainId(component: RuleNodeComponentDescriptor, config: RuleNodeConfiguration): string;
    getLatestRuleNodeDebugInput(ruleNodeId: string, config?: RequestConfig): Observable<DebugRuleNodeEventBody>;
    testScript(inputParams: TestScriptInputParams, scriptLang?: ScriptLanguage, config?: RequestConfig): Observable<TestScriptResult>;
    registerSystemRuleNodeConfigModule(module: any): void;
    private loadRuleNodeComponents;
    private resolveRuleNodeComponentsUiResources;
    private resolveRuleNodeComponentUiResources;
    getEdgeRuleChains(edgeId: string, pageLink: PageLink, config?: RequestConfig): Observable<PageData<RuleChain>>;
    assignRuleChainToEdge(edgeId: string, ruleChainId: string, config?: RequestConfig): Observable<RuleChain>;
    unassignRuleChainFromEdge(edgeId: string, ruleChainId: string, config?: RequestConfig): Observable<Object>;
    setEdgeTemplateRootRuleChain(ruleChainId: string, config?: RequestConfig): Observable<RuleChain>;
    setAutoAssignToEdgeRuleChain(ruleChainId: string, config?: RequestConfig): Observable<RuleChain>;
    unsetAutoAssignToEdgeRuleChain(ruleChainId: string, config?: RequestConfig): Observable<RuleChain>;
    getAutoAssignToEdgeRuleChains(config?: RequestConfig): Observable<Array<RuleChain>>;
    setEdgeRootRuleChain(edgeId: string, ruleChainId: string, config?: RequestConfig): Observable<Edge>;
    static ɵfac: i0.ɵɵFactoryDeclaration<RuleChainService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RuleChainService>;
}
