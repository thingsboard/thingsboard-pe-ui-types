import { Type } from '@angular/core';
import { RequestConfig } from './http-utils';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { PageLink } from '@shared/models/page/page-link';
import { PageData } from '@shared/models/page/page-data';
import { WidgetsBundle } from '@shared/models/widgets-bundle.model';
import { DeprecatedFilter, IWidgetSettingsComponent, WidgetType, widgetType, WidgetTypeDetails, WidgetTypeInfo } from '@shared/models/widget.models';
import { WidgetInfo } from '@app/modules/home/models/widget-component.models';
import { WidgetTypeId } from '@shared/models/id/widget-type-id';
import { Router } from '@angular/router';
import { IBasicWidgetConfigComponent } from '@home/components/widget/config/widget-config.component.models';
import { ResourcesService } from '@core/services/resources.service';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import * as i0 from "@angular/core";
export declare class WidgetService {
    private http;
    private userPermissionsService;
    private router;
    private resourcesService;
    private allWidgetsBundles;
    private systemWidgetsBundles;
    private tenantWidgetsBundles;
    private widgetsInfoInMemoryCache;
    private widgetsBundleCacheSubject;
    private basicWidgetSettingsComponentsMap;
    private widgetSettingsComponentsMap;
    constructor(http: HttpClient, userPermissionsService: UserPermissionsService, router: Router, resourcesService: ResourcesService);
    getWidgetScopeVariables(): string[];
    getAllWidgetsBundles(config?: RequestConfig): Observable<Array<WidgetsBundle>>;
    getSystemWidgetsBundles(config?: RequestConfig): Observable<Array<WidgetsBundle>>;
    getTenantWidgetsBundles(config?: RequestConfig): Observable<Array<WidgetsBundle>>;
    getWidgetBundles(pageLink: PageLink, fullSearch?: boolean, tenantOnly?: boolean, scadaFirst?: boolean, config?: RequestConfig): Observable<PageData<WidgetsBundle>>;
    getWidgetsBundle(widgetsBundleId: string, config?: RequestConfig): Observable<WidgetsBundle>;
    exportWidgetsBundle(widgetsBundleId: string, config?: RequestConfig): Observable<WidgetsBundle>;
    getWidgetsBundlesByIds(widgetsBundleIds: Array<string>, config?: RequestConfig): Observable<Array<WidgetsBundle>>;
    saveWidgetsBundle(widgetsBundle: WidgetsBundle, config?: RequestConfig): Observable<WidgetsBundle>;
    updateWidgetsBundleWidgetTypes(widgetsBundleId: string, widgetTypeIds: Array<string>, config?: RequestConfig): Observable<void>;
    updateWidgetsBundleWidgetFqns(widgetsBundleId: string, widgetTypeFqns: Array<string>, config?: RequestConfig): Observable<void>;
    deleteWidgetsBundle(widgetsBundleId: string, config?: RequestConfig): Observable<Object>;
    getBundleWidgetTypes(widgetsBundleId: string, config?: RequestConfig): Observable<Array<WidgetType>>;
    exportBundleWidgetTypesDetails(widgetsBundleId: string, includeResources?: boolean, config?: RequestConfig): Observable<Array<WidgetTypeDetails>>;
    getBundleWidgetTypeFqns(widgetsBundleId: string, config?: RequestConfig): Observable<Array<string>>;
    getBundleWidgetTypeInfosList(widgetsBundleId: string, config?: RequestConfig): Observable<Array<WidgetTypeInfo>>;
    getBundleWidgetTypeInfos(pageLink: PageLink, widgetsBundleId: string, fullSearch?: boolean, deprecatedFilter?: DeprecatedFilter, widgetTypes?: Array<widgetType>, config?: RequestConfig): Observable<PageData<WidgetTypeInfo>>;
    getWidgetType(fullFqn: string, config?: RequestConfig): Observable<WidgetType>;
    saveWidgetTypeDetails(widgetInfo: WidgetInfo, id: WidgetTypeId, createdTime: number, version: number, config?: RequestConfig): Observable<WidgetTypeDetails>;
    saveImportedWidgetTypeDetails(widgetTypeDetails: WidgetTypeDetails, config?: RequestConfig): Observable<WidgetTypeDetails>;
    getWidgetTypeById(widgetTypeId: string, config?: RequestConfig): Observable<WidgetTypeDetails>;
    exportWidgetType(widgetTypeId: string, includeResources?: boolean, config?: RequestConfig): Observable<WidgetTypeDetails>;
    getWidgetTypeInfoById(widgetTypeId: string, config?: RequestConfig): Observable<WidgetTypeInfo>;
    saveWidgetType(widgetTypeDetails: WidgetTypeDetails, config?: RequestConfig): Observable<WidgetTypeDetails>;
    deleteWidgetType(widgetTypeId: string, config?: RequestConfig): Observable<Object>;
    getWidgetTypes(pageLink: PageLink, tenantOnly?: boolean, fullSearch?: boolean, scadaFirst?: boolean, deprecatedFilter?: DeprecatedFilter, widgetTypes?: Array<widgetType>, config?: RequestConfig): Observable<PageData<WidgetTypeInfo>>;
    addWidgetFqnToWidgetBundle(widgetsBundleId: string, fqn: string, config?: RequestConfig): Observable<void>;
    getWidgetTemplate(widgetTypeParam: widgetType, config?: RequestConfig): Observable<WidgetInfo>;
    clearWidgetInfoInMemoryCache(): void;
    getWidgetInfoFromCache(fullFqn: string): WidgetInfo | undefined;
    putWidgetInfoToCache(widgetInfo: WidgetInfo): void;
    registerBasicWidgetConfigComponents(module: any): void;
    getBasicWidgetSettingsComponentBySelector(selector: string): Type<IBasicWidgetConfigComponent>;
    putBasicWidgetSettingsComponentToMap(selector: string, compType: Type<IBasicWidgetConfigComponent>): void;
    registerWidgetSettingsComponents(module: any): void;
    getWidgetSettingsComponentTypeBySelector(selector: string): Type<IWidgetSettingsComponent>;
    putWidgetSettingsComponentToMap(selector: string, compType: Type<IWidgetSettingsComponent>): void;
    private widgetTypeUpdated;
    deleteWidgetInfoFromCache(fullFqn: string): void;
    private loadWidgetsBundleCache;
    private invalidateWidgetsBundleCache;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<WidgetService>;
}
