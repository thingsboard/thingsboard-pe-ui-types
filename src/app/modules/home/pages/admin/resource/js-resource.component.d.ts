import { ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { EntityTableConfig } from '@home/models/entity/entities-table-config.models';
import { FormBuilder, FormGroup } from '@angular/forms';
import { EntityComponent } from '@home/components/entity/entity.component';
import { Resource, ResourceSubType } from '@shared/models/resource.models';
import * as i0 from "@angular/core";
export declare class JsResourceComponent extends EntityComponent<Resource> implements OnInit, OnDestroy {
    protected store: Store<AppState>;
    protected translate: TranslateService;
    protected entityValue: Resource;
    protected entitiesTableConfigValue: EntityTableConfig<Resource>;
    fb: FormBuilder;
    protected cd: ChangeDetectorRef;
    readonly ResourceSubType: typeof ResourceSubType;
    readonly jsResourceSubTypes: ResourceSubType[];
    readonly ResourceSubTypeTranslationMap: Map<ResourceSubType, string>;
    readonly maxResourceSize: number;
    private destroy$;
    constructor(store: Store<AppState>, translate: TranslateService, entityValue: Resource, entitiesTableConfigValue: EntityTableConfig<Resource>, fb: FormBuilder, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    hideDelete(): boolean;
    buildForm(entity: Resource): FormGroup;
    updateForm(entity: Resource): void;
    updateFormState(): void;
    prepareFormValue(formValue: Resource): Resource;
    getAllowedExtensions(): string;
    getAcceptType(): string;
    convertToBase64File(data: string): string;
    onResourceIdCopied(): void;
    uploadContentFromFile(content: string): void;
    private observeResourceSubTypeChange;
    private onResourceSubTypeChange;
    private updateResourceSubTypeFieldsState;
    static ɵfac: i0.ɵɵFactoryDeclaration<JsResourceComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<JsResourceComponent, "tb-js-resource", never, {}, {}, never, never, false, never>;
}
