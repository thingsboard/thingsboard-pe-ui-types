import { ActivatedRoute, ActivatedRouteSnapshot, Resolve, Router } from '@angular/router';
import { CellActionDescriptor, EntityColumn, EntityTableConfig, GroupActionDescriptor, HeaderActionDescriptor } from '@home/models/entity/entities-table-config.models';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { EntityAction } from '@home/models/entity/entity-component.models';
import { DeviceInfo, DeviceInfoQuery } from '@app/shared/models/device.models';
import { Observable } from 'rxjs';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { DeviceService } from '@app/core/http/device.service';
import { CustomerService } from '@core/http/customer.service';
import { BroadcastService } from '@core/services/broadcast.service';
import { MatDialog } from '@angular/material/dialog';
import { DialogService } from '@core/services/dialog.service';
import { HomeDialogsService } from '@home/dialogs/home-dialogs.service';
import { UtilsService } from '@core/services/utils.service';
import { AllEntitiesTableConfigService } from '@home/components/entity/all-entities-table-config.service';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { AuthUser } from '@shared/models/user.model';
import { PageLink } from '@shared/models/page/page-link';
import { EntityId } from '@shared/models/id/entity-id';
import * as i0 from "@angular/core";
export declare class DevicesTableConfigResolver implements Resolve<EntityTableConfig<DeviceInfo>> {
    private allEntitiesTableConfigService;
    private store;
    private userPermissionsService;
    private broadcast;
    private deviceService;
    private customerService;
    private dialogService;
    private homeDialogs;
    private translate;
    private datePipe;
    private utils;
    private router;
    private dialog;
    constructor(allEntitiesTableConfigService: AllEntitiesTableConfigService<DeviceInfo>, store: Store<AppState>, userPermissionsService: UserPermissionsService, broadcast: BroadcastService, deviceService: DeviceService, customerService: CustomerService, dialogService: DialogService, homeDialogs: HomeDialogsService, translate: TranslateService, datePipe: DatePipe, utils: UtilsService, router: Router, dialog: MatDialog);
    resolve(route: ActivatedRouteSnapshot): Observable<EntityTableConfig<DeviceInfo>>;
    configDefaults(config: EntityTableConfig<DeviceInfo>): void;
    onLoadAction(config: EntityTableConfig<DeviceInfo>, route: ActivatedRoute): void;
    configureColumns(authUser: AuthUser, config: EntityTableConfig<DeviceInfo>): Array<EntityColumn<DeviceInfo>>;
    private deviceState;
    private deviceStateStyle;
    configureEntityFunctions(config: EntityTableConfig<DeviceInfo>): void;
    prepareDeviceInfoQuery(config: EntityTableConfig<DeviceInfo>, pageLink: PageLink): DeviceInfoQuery;
    configureCellActions(config: EntityTableConfig<DeviceInfo>): Array<CellActionDescriptor<DeviceInfo>>;
    configureGroupActions(config: EntityTableConfig<DeviceInfo>): Array<GroupActionDescriptor<DeviceInfo>>;
    configureAddActions(config: EntityTableConfig<DeviceInfo>): Array<HeaderActionDescriptor>;
    private openDevice;
    importDevices($event: Event, config: EntityTableConfig<DeviceInfo>): void;
    deviceWizard($event: Event, config: EntityTableConfig<DeviceInfo>): void;
    manageCredentials($event: Event, device: DeviceInfo, isReadOnly: boolean, config: EntityTableConfig<DeviceInfo>): void;
    manageOwnerAndGroups($event: Event, device: DeviceInfo, config: EntityTableConfig<DeviceInfo>): void;
    checkConnectivity($event: Event, deviceId: EntityId, afterAdd?: boolean, config?: EntityTableConfig<DeviceInfo>): void;
    onDeviceAction(action: EntityAction<DeviceInfo>, config: EntityTableConfig<DeviceInfo>): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<DevicesTableConfigResolver, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DevicesTableConfigResolver>;
}
