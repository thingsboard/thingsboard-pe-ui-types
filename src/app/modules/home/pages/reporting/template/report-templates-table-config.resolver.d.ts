import { ActivatedRouteSnapshot, Router } from '@angular/router';
import { CellActionDescriptor, EntityColumn, EntityTableConfig, GroupActionDescriptor, HeaderActionDescriptor } from '@home/models/entity/entities-table-config.models';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { EntityAction } from '@home/models/entity/entity-component.models';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { ReportTemplateInfo } from '@shared/models/report.models';
import { ReportTemplateService } from '@core/http/report-template.service';
import { UtilsService } from '@core/services/utils.service';
import { AuthUser } from '@shared/models/user.model';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { ImportExportService } from '@shared/import-export/import-export.service';
import { MatDialog } from '@angular/material/dialog';
import * as i0 from "@angular/core";
export declare class ReportTemplatesTableConfigResolver {
    private store;
    private reportTemplateService;
    private importExport;
    private userPermissionsService;
    private dialog;
    private translate;
    private utils;
    private router;
    private datePipe;
    constructor(store: Store<AppState>, reportTemplateService: ReportTemplateService, importExport: ImportExportService, userPermissionsService: UserPermissionsService, dialog: MatDialog, translate: TranslateService, utils: UtilsService, router: Router, datePipe: DatePipe);
    resolve(_route: ActivatedRouteSnapshot): EntityTableConfig<ReportTemplateInfo>;
    configDefaults(config: EntityTableConfig<ReportTemplateInfo>): void;
    configureColumns(_authUser: AuthUser, config: EntityTableConfig<ReportTemplateInfo>): Array<EntityColumn<ReportTemplateInfo>>;
    configureEntityFunctions(config: EntityTableConfig<ReportTemplateInfo>): void;
    configureCellActions(config: EntityTableConfig<ReportTemplateInfo>): Array<CellActionDescriptor<ReportTemplateInfo>>;
    configureGroupActions(_config: EntityTableConfig<ReportTemplateInfo>): Array<GroupActionDescriptor<ReportTemplateInfo>>;
    configureAddActions(config: EntityTableConfig<ReportTemplateInfo>): Array<HeaderActionDescriptor>;
    openReportTemplate($event: Event, reportTemplate: ReportTemplateInfo, config: EntityTableConfig<ReportTemplateInfo>): void;
    importReportTemplate(_$event: Event, config: EntityTableConfig<ReportTemplateInfo>): void;
    exportReportTemplate($event: Event, reportTemplate: ReportTemplateInfo): void;
    private scheduleReport;
    onReportTemplateAction(action: EntityAction<ReportTemplateInfo>, config: EntityTableConfig<ReportTemplateInfo>): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReportTemplatesTableConfigResolver, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ReportTemplatesTableConfigResolver>;
}
