import { AfterViewInit, ChangeDetectorRef, DestroyRef, ElementRef, EventEmitter, OnDestroy, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { HasDirtyFlag } from '@core/guards/confirm-on-exit.guard';
import { HeaderFooter, PdfReportTemplateConfig, ReportTemplate, TbReportFormat } from '@shared/models/report.models';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { ActivatedRoute } from '@angular/router';
import { ReportTemplateService } from '@core/http/report-template.service';
import { MatDialog } from '@angular/material/dialog';
import { ReportComponentConfig } from '@shared/models/report-component.models';
import { FormBuilder, FormControl } from '@angular/forms';
import { ReportComponentContext } from '@home/pages/reporting/template/components/report-component.models';
import { EntityService } from '@core/http/entity.service';
import { TranslateService } from '@ngx-translate/core';
import { UtilsService } from '@core/services/utils.service';
import { DialogService } from '@core/services/dialog.service';
import { ReportService } from '@core/http/report.service';
import { ReportComponentsComponent } from '@home/pages/reporting/template/components/report-components.component';
import { DatePipe } from '@angular/common';
import { CdkScrollable } from '@angular/cdk/overlay';
import { ReportTemplateHeaderFooterComponent } from '@home/pages/reporting/template/report-template-header-footer.component';
import { MatButton } from '@angular/material/button';
import { TbPopoverService } from '@shared/components/popover.service';
import * as i0 from "@angular/core";
export declare class ReportTemplatePageComponent extends PageComponent implements OnInit, AfterViewInit, OnDestroy, HasDirtyFlag {
    private route;
    private userPermissionsService;
    private reportTemplateService;
    private reportService;
    private entityService;
    private utils;
    private translate;
    private destroyRef;
    private dialog;
    private dialogService;
    private fb;
    private date;
    private renderer;
    private cd;
    private popoverService;
    private viewContainerRef;
    reportComponentTypeMap: Map<import("@shared/models/report-component.models").ReportComponentType, import("@home/pages/reporting/template/components/report-component.models").ReportComponentTypeData<ReportComponentConfig>>;
    get isDirty(): boolean;
    set isDirty(value: boolean);
    get showHeaderFooter(): boolean;
    get pdfConfiguration(): PdfReportTemplateConfig;
    get currentHeader(): HeaderFooter;
    get currentFooter(): HeaderFooter;
    width: string;
    height: string;
    reportComponentsComponents: import("@angular/core").Signal<readonly ReportComponentsComponent[]>;
    headerFooterComponents: import("@angular/core").Signal<readonly ReportTemplateHeaderFooterComponent[]>;
    reportTemplateContainerEl: import("@angular/core").Signal<ElementRef<any>>;
    reportTemplateContentEl: import("@angular/core").Signal<CdkScrollable>;
    reportTemplateLayoutEl: import("@angular/core").Signal<ElementRef<any>>;
    readonly: boolean;
    format: TbReportFormat;
    subReport: boolean;
    isDirtyValue: boolean;
    isFullscreen: boolean;
    reportTemplate: ReportTemplate;
    timePreview: string;
    updateBreadcrumbs: EventEmitter<any>;
    prevReportComponent: ReportComponentConfig;
    editingReportComponent: ReportComponentConfig;
    reportComponentSearchFormControl: FormControl;
    reportComponentsFilter: string;
    reportTemplateSettingsFormControl: FormControl;
    headerToggleValue: 'header' | 'firstPageHeader';
    footerToggleValue: 'header' | 'firstPageHeader';
    reportComponentContext: ReportComponentContext;
    pageWidth: number;
    marginLeft: number;
    marginRight: number;
    contentMarginTop: number;
    contentMarginBottom: number;
    headerMarginTop: number;
    footerMarginBottom: number;
    background: string;
    scale: number;
    layoutWidth: number;
    viewInited: boolean;
    hasScroll: boolean;
    scrollTop: boolean;
    private scrolling;
    private layoutResize$;
    private stateController;
    constructor(route: ActivatedRoute, userPermissionsService: UserPermissionsService, reportTemplateService: ReportTemplateService, reportService: ReportService, entityService: EntityService, utils: UtilsService, translate: TranslateService, destroyRef: DestroyRef, dialog: MatDialog, dialogService: DialogService, fb: FormBuilder, date: DatePipe, renderer: Renderer2, cd: ChangeDetectorRef, popoverService: TbPopoverService, viewContainerRef: ViewContainerRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    saveReportTemplate(): void;
    declineReportTemplate(): void;
    currentHeaderChanged(value: 'header' | 'firstPageHeader'): void;
    currentFooterChanged(value: 'header' | 'firstPageHeader'): void;
    enabledHeaderFooterChanged(): void;
    headerFooterExpandAnimationStart(): void;
    headerFooterExpandAnimationFinish(): void;
    reportComponentsChanged(): void;
    reportComponentRemoved(reportComponent: ReportComponentConfig): void;
    editReportComponent(reportComponent: ReportComponentConfig): void;
    reportComponentUpdated(setDirty?: boolean): void;
    saveReportComponent(): void;
    cancelReportComponentEdit(): void;
    openFilters($event: Event): void;
    toggleVersionControl($event: Event, versionControlButton: MatButton): void;
    private createFilter;
    openEntityAliases($event: Event): void;
    private createEntityAlias;
    private editEntityAlias;
    openReportTemplateSettings($event: Event): void;
    generateTestReport(): void;
    scrollBottomTop(): void;
    private updateReportTemplateSettings;
    private updatePageLayout;
    private layoutResize;
    private updateScale;
    private init;
    private allReportComponentsComponents;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReportTemplatePageComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ReportTemplatePageComponent, "tb-report-template-page", never, {}, {}, never, never, false, never>;
}
