import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { ActivatedRoute } from '@angular/router';
import { ScadaSymbolData, ScadaSymbolEditObjectCallbacks } from '@home/pages/scada-symbol/scada-symbol-editor.models';
import { ScadaSymbolMetadata } from '@home/components/widget/lib/scada/scada-symbol.models';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { ScadaSymbolEditorComponent, ScadaSymbolEditorData } from '@home/pages/scada-symbol/scada-symbol-editor.component';
import { ImageService } from '@core/http/image.service';
import { HasDirtyFlag } from '@core/guards/confirm-on-exit.guard';
import { IAliasController } from '@core/api/widget-api.models';
import { EntityService } from '@core/http/entity.service';
import { UtilsService } from '@core/services/utils.service';
import { TranslateService } from '@ngx-translate/core';
import { Widget, widgetType } from '@shared/models/widget.models';
import { WidgetActionCallbacks } from '@home/components/widget/action/manage-widget-actions.component.models';
import { ScadaSymbolMetadataComponent } from '@home/pages/scada-symbol/metadata-components/scada-symbol-metadata.component';
import { MatDialog } from '@angular/material/dialog';
import { GridType } from 'angular-gridster2';
import { WidgetService } from '@core/http/widget.service';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import * as i0 from "@angular/core";
export declare class ScadaSymbolComponent extends PageComponent implements OnInit, OnDestroy, HasDirtyFlag, ScadaSymbolEditObjectCallbacks {
    protected store: Store<AppState>;
    private route;
    private fb;
    private cd;
    private entityService;
    private utils;
    private translate;
    private imageService;
    private widgetService;
    private userPermissionsService;
    private dialog;
    widgetType: typeof widgetType;
    GridType: typeof GridType;
    width: string;
    height: string;
    symbolEditor: ScadaSymbolEditorComponent;
    symbolMetadata: ScadaSymbolMetadataComponent;
    symbolData: ScadaSymbolData;
    symbolEditorData: ScadaSymbolEditorData;
    previewMode: boolean;
    previewMetadata: ScadaSymbolMetadata;
    scadaSymbolFormGroup: UntypedFormGroup;
    scadaPreviewFormGroup: UntypedFormGroup;
    private destroy$;
    private origSymbolData;
    updateBreadcrumbs: EventEmitter<any>;
    aliasController: IAliasController;
    widgetActionCallbacks: WidgetActionCallbacks;
    previewWidget: Widget;
    previewWidgets: Array<Widget>;
    tags: string[];
    editObjectCallbacks: ScadaSymbolEditObjectCallbacks;
    symbolEditorDirty: boolean;
    symbolEditorValid: boolean;
    private previewScadaSymbolObjectSettings;
    private forcePristine;
    private authUser;
    readonly: boolean;
    showHiddenElements: boolean;
    showCreateWidgetButton: boolean;
    get isDirty(): boolean;
    set isDirty(value: boolean);
    constructor(store: Store<AppState>, route: ActivatedRoute, fb: UntypedFormBuilder, cd: ChangeDetectorRef, entityService: EntityService, utils: UtilsService, translate: TranslateService, imageService: ImageService, widgetService: WidgetService, userPermissionsService: UserPermissionsService, dialog: MatDialog);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onApplyScadaSymbolConfig(): void;
    onRevertScadaSymbolConfig(): void;
    enterPreviewMode(): void;
    exitPreviewMode(): void;
    onRevertPreviewSettings(): void;
    onApplyPreviewSettings(): void;
    tagsUpdated(tags: string[]): void;
    tagHasStateRenderFunction(tag: string): boolean;
    tagHasClickAction(tag: string): boolean;
    editTagStateRenderFunction(tag: string): void;
    editTagClickAction(tag: string): void;
    onSymbolEditObjectDirty(dirty: boolean): void;
    onSymbolEditObjectValid(valid: boolean): void;
    updateScadaSymbol(): void;
    downloadScadaSymbol(): void;
    createWidget(): void;
    private updatePreviewWidgetSettings;
    private prepareScadaSymbolContent;
    private reset;
    private init;
    static ɵfac: i0.ɵɵFactoryDeclaration<ScadaSymbolComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ScadaSymbolComponent, "tb-scada-symbol", never, {}, {}, never, never, false, never>;
}
