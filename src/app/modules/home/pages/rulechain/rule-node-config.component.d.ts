import { EventEmitter, OnDestroy, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { IRuleNodeConfigurationComponent, RuleNodeConfiguration, RuleNodeDefinition } from '@shared/models/rule-node.models';
import { Subscription } from 'rxjs';
import { RuleChainService } from '@core/http/rule-chain.service';
import { JsonObjectEditComponent } from '@shared/components/json-object-edit.component';
import { RuleChainType } from '@shared/models/rule-chain.models';
import * as i0 from "@angular/core";
export declare class RuleNodeConfigComponent implements ControlValueAccessor, OnDestroy {
    private ruleChainService;
    private fb;
    definedConfigContainer: ViewContainerRef;
    jsonObjectEditComponent: JsonObjectEditComponent;
    readonly styleDisplay = "block";
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    ruleNodeId: string;
    ruleChainId: string;
    ruleChainType: RuleChainType;
    initRuleNode: EventEmitter<void>;
    changeScript: EventEmitter<void>;
    nodeDefinitionValue: RuleNodeDefinition;
    set nodeDefinition(nodeDefinition: RuleNodeDefinition);
    get nodeDefinition(): RuleNodeDefinition;
    definedDirectiveError: string;
    ruleNodeConfigFormGroup: UntypedFormGroup;
    changeSubscription: Subscription;
    changeScriptSubscription: Subscription;
    definedConfigComponent: IRuleNodeConfigurationComponent;
    private definedConfigComponentRef;
    private configuration;
    private propagateChange;
    constructor(ruleChainService: RuleChainService, fb: UntypedFormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    ngOnDestroy(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: RuleNodeConfiguration): void;
    useDefinedDirective(): boolean;
    private updateModel;
    private validateDefinedDirective;
    validate(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RuleNodeConfigComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RuleNodeConfigComponent, "tb-rule-node-config", never, { "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "ruleNodeId": { "alias": "ruleNodeId"; "required": false; }; "ruleChainId": { "alias": "ruleChainId"; "required": false; }; "ruleChainType": { "alias": "ruleChainType"; "required": false; }; "nodeDefinition": { "alias": "nodeDefinition"; "required": false; }; }, { "initRuleNode": "initRuleNode"; "changeScript": "changeScript"; }, never, never, false, never>;
}
