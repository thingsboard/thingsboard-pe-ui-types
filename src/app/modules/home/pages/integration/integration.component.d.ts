import { ChangeDetectorRef, OnInit } from '@angular/core';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { EntityComponent } from '../../components/entity/entity.component';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { EntityTableConfig } from '@home/models/entity/entities-table-config.models';
import { Integration, IntegrationInfo } from '@shared/models/integration.models';
import { ConverterType } from '@shared/models/converter.models';
import { IntegrationService } from '@core/http/integration.service';
import { PageLink } from '@shared/models/page/page-link';
import { EntityType } from '@shared/models/entity-type.models';
import * as i0 from "@angular/core";
export declare class IntegrationComponent extends EntityComponent<Integration, PageLink, IntegrationInfo> implements OnInit {
    protected store: Store<AppState>;
    protected translate: TranslateService;
    protected entityValue: Integration;
    protected entitiesTableConfigValue: EntityTableConfig<Integration, PageLink, IntegrationInfo>;
    protected fb: UntypedFormBuilder;
    protected integrationService: IntegrationService;
    protected cd: ChangeDetectorRef;
    converterType: typeof ConverterType;
    integrationScope: 'tenant' | 'edges' | 'edge';
    EntityType: typeof EntityType;
    private integrationType;
    constructor(store: Store<AppState>, translate: TranslateService, entityValue: Integration, entitiesTableConfigValue: EntityTableConfig<Integration, PageLink, IntegrationInfo>, fb: UntypedFormBuilder, integrationService: IntegrationService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    hideDelete(): boolean;
    buildForm(entity: Integration): UntypedFormGroup;
    updateFormState(): void;
    private checkIsRemote;
    get showDownlinkConvector(): boolean;
    private get allowCheckConnection();
    get isCheckConnectionAvailable(): boolean;
    get isRemoteIntegration(): boolean;
    get isEdgeTemplate(): boolean;
    updateForm(entity: Integration): void;
    prepareFormValue(formValue: any): any;
    onIntegrationIdCopied(): void;
    onIntegrationInfoCopied(type: string): void;
    onIntegrationCheck(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IntegrationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IntegrationComponent, "tb-integration", never, {}, {}, never, never, false, never>;
}
