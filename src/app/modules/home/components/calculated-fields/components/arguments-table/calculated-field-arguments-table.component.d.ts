import { AfterViewInit, ChangeDetectorRef, DestroyRef, OnChanges, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor, FormBuilder, ValidationErrors, Validator } from '@angular/forms';
import { ArgumentEntityType, ArgumentType, CalculatedFieldArgument, CalculatedFieldArgumentValue, CalculatedFieldType } from '@shared/models/calculated-field.models';
import { MatButton } from '@angular/material/button';
import { TbPopoverService } from '@shared/components/popover.service';
import { EntityId } from '@shared/models/id/entity-id';
import { EntityType } from '@shared/models/entity-type.models';
import { TbTableDatasource } from '@shared/components/table/table-datasource.abstract';
import { EntityService } from '@core/http/entity.service';
import { MatSort } from '@angular/material/sort';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import * as i0 from "@angular/core";
export declare class CalculatedFieldArgumentsTableComponent implements ControlValueAccessor, Validator, OnChanges, AfterViewInit {
    private fb;
    private popoverService;
    private viewContainerRef;
    private cd;
    private renderer;
    private entityService;
    private destroyRef;
    private store;
    entityId: EntityId;
    tenantId: string;
    entityName: string;
    calculatedFieldType: CalculatedFieldType;
    readonly: boolean;
    sort: MatSort;
    errorText: string;
    argumentsFormArray: import("@angular/forms").FormArray<import("@angular/forms").FormControl<CalculatedFieldArgumentValue>>;
    entityNameMap: Map<string, string>;
    sortOrder: {
        direction: string;
        property: string;
    };
    dataSource: CalculatedFieldArgumentDatasource;
    readonly entityTypeTranslations: Map<EntityType | import("@shared/models/entity-type.models").AliasEntityType, import("@shared/models/entity-type.models").EntityTypeTranslation>;
    readonly ArgumentTypeTranslations: Map<ArgumentType, string>;
    readonly ArgumentEntityType: typeof ArgumentEntityType;
    readonly ArgumentType: typeof ArgumentType;
    readonly CalculatedFieldType: typeof CalculatedFieldType;
    readonly maxArgumentsPerCF: number;
    readonly NULL_UUID = "13814000-1dd2-11b2-8080-808080808080";
    private popoverComponent;
    private propagateChange;
    constructor(fb: FormBuilder, popoverService: TbPopoverService, viewContainerRef: ViewContainerRef, cd: ChangeDetectorRef, renderer: Renderer2, entityService: EntityService, destroyRef: DestroyRef, store: Store<AppState>);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    registerOnChange(fn: (argumentsObj: Record<string, CalculatedFieldArgument>) => void): void;
    registerOnTouched(_: any): void;
    validate(): ValidationErrors | null;
    onDelete($event: Event, argument: CalculatedFieldArgumentValue): void;
    manageArgument($event: Event, matButton: MatButton, argument?: CalculatedFieldArgumentValue): void;
    private updateDataSource;
    private updateErrorText;
    private getArgumentsObject;
    writeValue(argumentsObj: Record<string, CalculatedFieldArgument>): void;
    getEntityDetailsPageURL(id: string, type: EntityType): string;
    private populateArgumentsFormArray;
    private updateEntityNameMap;
    private fetchEntityNames;
    private getSortValue;
    private sortData;
    static ɵfac: i0.ɵɵFactoryDeclaration<CalculatedFieldArgumentsTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CalculatedFieldArgumentsTableComponent, "tb-calculated-field-arguments-table", never, { "entityId": { "alias": "entityId"; "required": false; }; "tenantId": { "alias": "tenantId"; "required": false; }; "entityName": { "alias": "entityName"; "required": false; }; "calculatedFieldType": { "alias": "calculatedFieldType"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; }, {}, never, never, false, never>;
    static ngAcceptInputType_readonly: unknown;
}
declare class CalculatedFieldArgumentDatasource extends TbTableDatasource<CalculatedFieldArgumentValue> {
    constructor();
}
export {};
