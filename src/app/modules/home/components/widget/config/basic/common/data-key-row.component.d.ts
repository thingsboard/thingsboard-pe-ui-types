import { ChangeDetectorRef, DestroyRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, ValidationErrors } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { WidgetConfigComponent } from '@home/components/widget/widget-config.component';
import { DataKey, DatasourceType, Widget, widgetType } from '@shared/models/widget.models';
import { DataKeyType } from '@shared/models/telemetry/telemetry.models';
import { DataKeySettingsFunction } from '@home/components/widget/lib/settings/common/key/data-keys.component.models';
import { Dashboard } from '@shared/models/dashboard.models';
import { IAliasController } from '@core/api/widget-api.models';
import { TimeSeriesChartSeriesType, TimeSeriesChartYAxisId } from '@home/components/widget/lib/chart/time-series-chart.models';
import { WidgetConfigCallbacks } from '@home/components/widget/config/widget-config.component.models';
import { FormProperty } from '@shared/models/dynamic-form.models';
import * as i0 from "@angular/core";
export declare const dataKeyValid: (key: DataKey) => boolean;
export declare const dataKeyRowValidator: (control: AbstractControl) => ValidationErrors | null;
export declare class DataKeyRowComponent implements ControlValueAccessor, OnInit, OnChanges {
    private fb;
    private dialog;
    private cd;
    private widgetConfigComponent;
    private destroyRef;
    timeSeriesChartSeriesTypes: TimeSeriesChartSeriesType[];
    timeSeriesChartSeriesTypeTranslations: Map<TimeSeriesChartSeriesType, string>;
    timeSeriesChartSeriesTypeIcons: Map<TimeSeriesChartSeriesType, string>;
    disabled: boolean;
    required: boolean;
    datasourceType: DatasourceType;
    entityAliasId: string;
    deviceId: string;
    hasAdditionalLatestDataKeys: boolean;
    hideDataKeyLabel: boolean;
    hideDataKeyColor: boolean;
    hideDataKeyUnits: boolean;
    hideDataKeyDecimals: boolean;
    hideUnits: boolean;
    hideDecimals: boolean;
    timeSeriesChart: boolean;
    showTimeSeriesType: boolean;
    yAxisIds: TimeSeriesChartYAxisId[];
    singleRow: boolean;
    dataKeyType: DataKeyType;
    keySettingsTitle: string;
    removeKeyTitle: string;
    keyRemoved: EventEmitter<any>;
    keyFormControl: UntypedFormControl;
    keyRowFormGroup: UntypedFormGroup;
    modelValue: DataKey;
    generateDataKey: any;
    get widgetType(): widgetType;
    get callbacks(): WidgetConfigCallbacks;
    get widget(): Widget;
    get dashboard(): Dashboard;
    get aliasController(): IAliasController;
    get dataKeySettingsForm(): FormProperty[];
    get dataKeySettingsDirective(): string;
    get latestDataKeySettingsForm(): FormProperty[];
    get latestDataKeySettingsDirective(): string;
    get dataKeySettingsFunction(): DataKeySettingsFunction;
    get isEntityDatasource(): boolean;
    get displayUnitsOrDigits(): boolean;
    get isLatestDataKeys(): boolean;
    get supportsUnitConversion(): boolean;
    private propagateChange;
    constructor(fb: UntypedFormBuilder, dialog: MatDialog, cd: ChangeDetectorRef, widgetConfigComponent: WidgetConfigComponent, destroyRef: DestroyRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: DataKey): void;
    editKey(advanced?: boolean): void;
    private _generateDataKey;
    private updateModel;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataKeyRowComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataKeyRowComponent, "tb-data-key-row", never, { "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; "datasourceType": { "alias": "datasourceType"; "required": false; }; "entityAliasId": { "alias": "entityAliasId"; "required": false; }; "deviceId": { "alias": "deviceId"; "required": false; }; "hasAdditionalLatestDataKeys": { "alias": "hasAdditionalLatestDataKeys"; "required": false; }; "hideDataKeyLabel": { "alias": "hideDataKeyLabel"; "required": false; }; "hideDataKeyColor": { "alias": "hideDataKeyColor"; "required": false; }; "hideDataKeyUnits": { "alias": "hideDataKeyUnits"; "required": false; }; "hideDataKeyDecimals": { "alias": "hideDataKeyDecimals"; "required": false; }; "hideUnits": { "alias": "hideUnits"; "required": false; }; "hideDecimals": { "alias": "hideDecimals"; "required": false; }; "timeSeriesChart": { "alias": "timeSeriesChart"; "required": false; }; "showTimeSeriesType": { "alias": "showTimeSeriesType"; "required": false; }; "yAxisIds": { "alias": "yAxisIds"; "required": false; }; "singleRow": { "alias": "singleRow"; "required": false; }; "dataKeyType": { "alias": "dataKeyType"; "required": false; }; "keySettingsTitle": { "alias": "keySettingsTitle"; "required": false; }; "removeKeyTitle": { "alias": "removeKeyTitle"; "required": false; }; }, { "keyRemoved": "keyRemoved"; }, never, never, false, never>;
}
