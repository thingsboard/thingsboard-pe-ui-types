import { ChangeDetectorRef, DestroyRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor, UntypedFormArray, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validator } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { WidgetConfigComponent } from '@home/components/widget/widget-config.component';
import { DataKey, DatasourceType, widgetType } from '@shared/models/widget.models';
import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { DataKeyType } from '@shared/models/telemetry/telemetry.models';
import { UtilsService } from '@core/services/utils.service';
import { DataKeySettingsFunction } from '@home/components/widget/lib/settings/common/key/data-keys.component.models';
import { TimeSeriesChartYAxisId } from '@home/components/widget/lib/chart/time-series-chart.models';
import { FormProperty } from '@shared/models/dynamic-form.models';
import { WidgetConfigCallbacks } from '@home/components/widget/config/widget-config.component.models';
import { IAliasController } from '@core/api/widget-api.models';
import * as i0 from "@angular/core";
export interface DataKeysPanelOptions {
    widgetType?: widgetType;
    callbacks?: WidgetConfigCallbacks;
    settingsForm?: FormProperty[];
    latestSettingsForm?: FormProperty[];
    hasAdditionalLatestDataKeys?: boolean;
}
export declare class DataKeysPanelComponent implements ControlValueAccessor, OnInit, OnChanges, Validator {
    private fb;
    private dialog;
    private cd;
    private utils;
    private widgetConfigComponent;
    private destroyRef;
    disabled: boolean;
    stroked: boolean;
    panelTitle: string;
    addKeyTitle: string;
    keySettingsTitle: string;
    removeKeyTitle: string;
    noKeysText: string;
    requiredKeysText: string;
    datasourceType: DatasourceType;
    entityAliasId: string;
    deviceId: string;
    reportMode: boolean;
    hidePanel: boolean;
    hideDataKeyColor: boolean;
    hideUnits: boolean;
    hideDecimals: boolean;
    hideDataKeyUnits: boolean;
    hideDataKeyDecimals: boolean;
    hideSourceSelection: boolean;
    timeSeriesChart: boolean;
    showTimeSeriesType: boolean;
    yAxisIds: TimeSeriesChartYAxisId[];
    aliasController: IAliasController;
    dataKeysPanelOptions: DataKeysPanelOptions;
    dataKeyType: DataKeyType;
    keysListFormGroup: UntypedFormGroup;
    errorText: string;
    get widgetType(): widgetType;
    get callbacks(): WidgetConfigCallbacks;
    get hasAdditionalLatestDataKeys(): boolean;
    get dataKeySettingsForm(): FormProperty[];
    get latestDataKeySettingsForm(): FormProperty[];
    get dataKeySettingsFunction(): DataKeySettingsFunction;
    get dragEnabled(): boolean;
    get noKeys(): boolean;
    private propagateChange;
    constructor(fb: UntypedFormBuilder, dialog: MatDialog, cd: ChangeDetectorRef, utils: UtilsService, widgetConfigComponent: WidgetConfigComponent, destroyRef: DestroyRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private updateParams;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: DataKey[] | undefined): void;
    validate(c: UntypedFormControl): {
        dataKeyRows: {
            valid: boolean;
        };
    };
    keyDrop(event: CdkDragDrop<string[]>): void;
    keysFormArray(): UntypedFormArray;
    trackByKey(index: number, keyControl: AbstractControl): any;
    removeKey(index: number): void;
    addKey(): void;
    private prepareKeysFormArray;
    private hasDataKeysPanelOptions;
    private getDataKeysPanelOption;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataKeysPanelComponent, [null, null, null, null, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataKeysPanelComponent, "tb-data-keys-panel", never, { "disabled": { "alias": "disabled"; "required": false; }; "stroked": { "alias": "stroked"; "required": false; }; "panelTitle": { "alias": "panelTitle"; "required": false; }; "addKeyTitle": { "alias": "addKeyTitle"; "required": false; }; "keySettingsTitle": { "alias": "keySettingsTitle"; "required": false; }; "removeKeyTitle": { "alias": "removeKeyTitle"; "required": false; }; "noKeysText": { "alias": "noKeysText"; "required": false; }; "requiredKeysText": { "alias": "requiredKeysText"; "required": false; }; "datasourceType": { "alias": "datasourceType"; "required": false; }; "entityAliasId": { "alias": "entityAliasId"; "required": false; }; "deviceId": { "alias": "deviceId"; "required": false; }; "reportMode": { "alias": "reportMode"; "required": false; }; "hidePanel": { "alias": "hidePanel"; "required": false; }; "hideDataKeyColor": { "alias": "hideDataKeyColor"; "required": false; }; "hideUnits": { "alias": "hideUnits"; "required": false; }; "hideDecimals": { "alias": "hideDecimals"; "required": false; }; "hideDataKeyUnits": { "alias": "hideDataKeyUnits"; "required": false; }; "hideDataKeyDecimals": { "alias": "hideDataKeyDecimals"; "required": false; }; "hideSourceSelection": { "alias": "hideSourceSelection"; "required": false; }; "timeSeriesChart": { "alias": "timeSeriesChart"; "required": false; }; "showTimeSeriesType": { "alias": "showTimeSeriesType"; "required": false; }; "yAxisIds": { "alias": "yAxisIds"; "required": false; }; "aliasController": { "alias": "aliasController"; "required": false; }; "dataKeysPanelOptions": { "alias": "dataKeysPanelOptions"; "required": false; }; }, {}, never, ["*"], false, never>;
}
