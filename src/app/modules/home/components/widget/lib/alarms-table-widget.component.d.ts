import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { WidgetContext } from '@home/models/widget-component.models';
import { DataKey, WidgetActionDescriptor } from '@shared/models/widget.models';
import { IWidgetSubscription } from '@core/api/widget-api.models';
import { UtilsService } from '@core/services/utils.service';
import { TranslateService } from '@ngx-translate/core';
import { CollectionViewer, DataSource, SelectionModel } from '@angular/cdk/collections';
import { Observable } from 'rxjs';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort, SortDirection } from '@angular/material/sort';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { EntityColumn, TableCellButtonActionDescriptor } from '@home/components/widget/lib/table-widget.models';
import { Overlay } from '@angular/cdk/overlay';
import { AlarmDataInfo, AlarmInfo } from '@shared/models/alarm.models';
import { DatePipe } from '@angular/common';
import { MatDialog } from '@angular/material/dialog';
import { DialogService } from '@core/services/dialog.service';
import { AlarmService } from '@core/http/alarm.service';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { AlarmData, AlarmDataPageLink, KeyFilter } from '@app/shared/models/query/query.models';
import { EntityService } from '@core/http/entity.service';
import * as i0 from "@angular/core";
interface AlarmWidgetActionDescriptor extends TableCellButtonActionDescriptor {
    details?: boolean;
    acknowledge?: boolean;
    clear?: boolean;
    activity?: boolean;
}
export declare class AlarmsTableWidgetComponent extends PageComponent implements OnInit, OnDestroy, AfterViewInit {
    protected store: Store<AppState>;
    private userPermissionsService;
    private elementRef;
    private ngZone;
    private overlay;
    private viewContainerRef;
    private entityService;
    private utils;
    translate: TranslateService;
    private domSanitizer;
    private datePipe;
    private dialog;
    private dialogService;
    private alarmService;
    private cd;
    ctx: WidgetContext;
    searchInputField: ElementRef;
    paginator: MatPaginator;
    sort: MatSort;
    readonly: boolean;
    enableSelection: boolean;
    displayPagination: boolean;
    enableStickyHeader: boolean;
    enableStickyAction: boolean;
    showCellActionsMenu: boolean;
    pageSizeOptions: any;
    pageLink: AlarmDataPageLink;
    sortOrderProperty: string;
    textSearchMode: boolean;
    hidePageSize: boolean;
    columns: Array<EntityColumn>;
    displayedColumns: string[];
    alarmsDatasource: AlarmsDatasource;
    noDataDisplayMessageText: string;
    hasRowAction: boolean;
    private setCellButtonAction;
    private cellContentCache;
    private cellStyleCache;
    private rowStyleCache;
    private settings;
    private widgetConfig;
    private subscription;
    private widgetResize$;
    private displayActivity;
    private displayDetails;
    allowAcknowledgment: boolean;
    private allowClear;
    allowAssign: boolean;
    private defaultPageSize;
    private defaultSortOrder;
    private contentsInfo;
    private stylesInfo;
    private columnWidth;
    private columnDefaultVisibility;
    private columnSelectionAvailability;
    private columnExportParameters;
    private rowStylesInfo;
    private widgetTimewindowChanged$;
    private searchAction;
    private columnDisplayAction;
    private alarmFilterAction;
    constructor(store: Store<AppState>, userPermissionsService: UserPermissionsService, elementRef: ElementRef, ngZone: NgZone, overlay: Overlay, viewContainerRef: ViewContainerRef, entityService: EntityService, utils: UtilsService, translate: TranslateService, domSanitizer: DomSanitizer, datePipe: DatePipe, dialog: MatDialog, dialogService: DialogService, alarmService: AlarmService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    onDataUpdated(): void;
    pageLinkSortDirection(): SortDirection;
    private initializeConfig;
    private updateAlarmSource;
    private editColumnsToDisplay;
    private resetPageIndex;
    private editAlarmFilter;
    private enterFilterMode;
    exitFilterMode(): void;
    private updateData;
    trackByColumnDef(index: any, column: EntityColumn): string;
    trackByAlarmId(index: number, alarm: AlarmData): string;
    trackByActionCellDescriptionId(index: number, action: WidgetActionDescriptor): string;
    headerStyle(key: EntityColumn): any;
    rowStyle(alarm: AlarmDataInfo, row: number): any;
    cellStyle(alarm: AlarmDataInfo, key: EntityColumn, row: number): any;
    cellContent(alarm: AlarmDataInfo, key: EntityColumn, row: number, useSafeHtml?: boolean): SafeHtml;
    onRowClick($event: Event, alarm: AlarmDataInfo): void;
    onActionButtonClick($event: Event, alarm: AlarmDataInfo, actionDescriptor: AlarmWidgetActionDescriptor): void;
    actionEnabled(alarm: AlarmDataInfo, actionDescriptor: AlarmWidgetActionDescriptor): boolean;
    private openAlarmDetails;
    private ackAlarm;
    ackAlarms($event: Event): void;
    private clearAlarm;
    clearAlarms($event: Event): void;
    private openAlarmActivity;
    private defaultContent;
    private defaultStyle;
    customDataExport(): {
        [key: string]: any;
    }[] | Observable<{
        [key: string]: any;
    }[]>;
    private includeColumnInExport;
    private alarmDataToExportedData;
    isSorting(column: EntityColumn): boolean;
    private clearCache;
    getUserDisplayName(entity: AlarmInfo): string;
    getUserInitials(entity: AlarmInfo): string;
    getAvatarBgColor(entity: AlarmInfo): string;
    openAlarmAssigneePanel($event: Event, entity: AlarmInfo): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AlarmsTableWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AlarmsTableWidgetComponent, "tb-alarms-table-widget", never, { "ctx": "ctx"; }, {}, never, never, false, never>;
}
declare class AlarmsDatasource implements DataSource<AlarmDataInfo> {
    private subscription;
    private dataKeys;
    private ngZone;
    private widgetContext;
    private alarmsSubject;
    private pageDataSubject;
    selection: SelectionModel<string>;
    private selectionModeChanged;
    selectionModeChanged$: Observable<boolean>;
    private currentAlarm;
    alarms: AlarmDataInfo[];
    dataLoading: boolean;
    countCellButtonAction: number;
    private appliedPageLink;
    private appliedSortOrderLabel;
    private reserveSpaceForHiddenAction;
    private cellButtonActions;
    private readonly usedShowCellActionFunction;
    constructor(subscription: IWidgetSubscription, dataKeys: Array<DataKey>, ngZone: NgZone, widgetContext: WidgetContext, actionCellDescriptors: AlarmWidgetActionDescriptor[]);
    connect(collectionViewer: CollectionViewer): Observable<AlarmDataInfo[] | ReadonlyArray<AlarmDataInfo>>;
    disconnect(collectionViewer: CollectionViewer): void;
    loadAlarms(pageLink: AlarmDataPageLink, sortOrderLabel: string, keyFilters: KeyFilter[]): void;
    private clear;
    updateAlarms(): void;
    alarmDataToInfo(alarmData: AlarmData): AlarmDataInfo;
    isAllSelected(): Observable<boolean>;
    isEmpty(): Observable<boolean>;
    total(): Observable<number>;
    toggleSelection(alarm: AlarmDataInfo): void;
    isSelected(alarm: AlarmDataInfo): boolean;
    clearSelection(): void;
    masterToggle(): void;
    toggleCurrentAlarm(alarm: AlarmDataInfo): boolean;
    isCurrentAlarm(alarm: AlarmDataInfo): boolean;
    private onSelectionModeChanged;
}
export {};
