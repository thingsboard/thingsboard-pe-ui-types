import { ECharts, EChartsOption } from '@home/components/widget/lib/chart/echarts-widget.models';
import { LatestChartDataItem, LatestChartLegendItem, LatestChartSettings } from '@home/components/widget/lib/chart/latest-chart.models';
import { WidgetContext } from '@home/models/widget-component.models';
import { DeepPartial } from '@shared/models/common';
import { Renderer2 } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { DataKey } from '@shared/models/widget.models';
import * as echarts from 'echarts/core';
import { Svg } from '@svgdotjs/svg.js';
import { ValueFormatProcessor } from '@shared/models/widget-settings.models';
export declare abstract class TbLatestChart<S extends LatestChartSettings> {
    protected ctx: WidgetContext;
    private readonly inputSettings;
    protected chartElement: HTMLElement;
    private renderer;
    protected translate: TranslateService;
    private autoResize;
    private readonly shapeResize$;
    protected readonly settings: S;
    protected valueFormatter: ValueFormatProcessor;
    protected total: number;
    protected totalText: string;
    protected latestChart: ECharts;
    protected latestChartOption: EChartsOption;
    protected svgShape: Svg;
    protected dataItems: LatestChartDataItem[];
    private legendItems;
    private itemClick;
    protected constructor(ctx: WidgetContext, inputSettings: DeepPartial<S>, chartElement: HTMLElement, renderer: Renderer2, translate: TranslateService, autoResize?: boolean);
    private prepareValueFormat;
    private setupData;
    getLegendItems(): LatestChartLegendItem[];
    update(): void;
    keyEnter(dataKey: DataKey): void;
    keyLeave(dataKey: DataKey): void;
    toggleKey(dataKey: DataKey): void;
    destroy(): void;
    resize(): void;
    onItemClick(itemClick: ($event: Event, item: LatestChartDataItem) => void): void;
    protected updateSeriesData(initial?: boolean): void;
    private drawChart;
    protected onChartClick(params: echarts.ECElementEvent): void;
    private onResize;
    protected initSettings(): void;
    protected initialShapeWidth(): number;
    protected initialShapeHeight(): number;
    protected forceRedrawOnResize(): boolean;
    protected beforeResize(_shapeWidth: number, _shapeHeight: number): void;
    protected afterResize(_shapeWidth: number, _shapeHeight: number): void;
    protected afterDrawChart(): void;
    protected afterUpdateSeriesData(_initial: boolean): void;
    protected abstract defaultSettings(): S;
    protected abstract prepareLatestChartOption(): void;
    protected abstract doUpdateSeriesData(): void;
}
