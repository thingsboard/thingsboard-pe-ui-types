import { DestroyRef, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor, UntypedFormControl } from '@angular/forms';
import { DateFormatSettings } from '@shared/models/widget-settings.models';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { MatButton } from '@angular/material/button';
import { TbPopoverService } from '@shared/components/popover.service';
import * as i0 from "@angular/core";
export declare class DateFormatSelectComponent implements OnInit, ControlValueAccessor {
    private translate;
    private date;
    private popoverService;
    private renderer;
    private viewContainerRef;
    private destroyRef;
    customFormatButton: MatButton;
    disabled: boolean;
    excludeLastUpdateAgo: boolean;
    includeAuto: boolean;
    includeMilliseconds: boolean;
    asStringFormat: boolean;
    dateFormatList: DateFormatSettings[];
    dateFormatsCompare: (df1: DateFormatSettings, df2: DateFormatSettings) => boolean;
    dateFormatFormControl: UntypedFormControl;
    modelValue: DateFormatSettings;
    private propagateChange;
    private formatCache;
    constructor(translate: TranslateService, date: DatePipe, popoverService: TbPopoverService, renderer: Renderer2, viewContainerRef: ViewContainerRef, destroyRef: DestroyRef);
    ngOnInit(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: DateFormatSettings | string): void;
    updateModel(value: DateFormatSettings): void;
    dateFormatDisplayValue(value: DateFormatSettings): string;
    openDateFormatSettingsPopup($event: Event, matButton: MatButton): void;
    openAutoFormatSettingsPopup($event: Event, matButton: MatButton): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DateFormatSelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DateFormatSelectComponent, "tb-date-format-select", never, { "disabled": { "alias": "disabled"; "required": false; }; "excludeLastUpdateAgo": { "alias": "excludeLastUpdateAgo"; "required": false; }; "includeAuto": { "alias": "includeAuto"; "required": false; }; "includeMilliseconds": { "alias": "includeMilliseconds"; "required": false; }; "asStringFormat": { "alias": "asStringFormat"; "required": false; }; }, {}, never, never, false, never>;
}
