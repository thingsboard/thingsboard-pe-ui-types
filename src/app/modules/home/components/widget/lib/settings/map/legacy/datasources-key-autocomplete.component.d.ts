import { DestroyRef, ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { Datasource } from '@shared/models/widget.models';
import { EntityService } from '@core/http/entity.service';
import * as i0 from "@angular/core";
export declare class DatasourcesKeyAutocompleteComponent extends PageComponent implements OnInit, ControlValueAccessor {
    protected store: Store<AppState>;
    private translate;
    private entityService;
    private fb;
    private destroyRef;
    keyInput: ElementRef;
    disabled: boolean;
    datasources: Array<Datasource>;
    label: string;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    private modelValue;
    private propagateChange;
    keyFormGroup: UntypedFormGroup;
    filteredKeys: Observable<Array<string>>;
    keySearchText: string;
    constructor(store: Store<AppState>, translate: TranslateService, entityService: EntityService, fb: UntypedFormBuilder, destroyRef: DestroyRef);
    ngOnInit(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string): void;
    clearKey(): void;
    onFocus(): void;
    private updateModel;
    private fetchKeys;
    private createKeyFilter;
    private allKeys;
    static ɵfac: i0.ɵɵFactoryDeclaration<DatasourcesKeyAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DatasourcesKeyAutocompleteComponent, "tb-datasources-key-autocomplete", never, { "disabled": { "alias": "disabled"; "required": false; }; "datasources": { "alias": "datasources"; "required": false; }; "label": { "alias": "label"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, {}, never, never, false, never>;
}
