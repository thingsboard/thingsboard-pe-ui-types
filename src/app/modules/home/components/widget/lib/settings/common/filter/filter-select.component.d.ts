import { DestroyRef, ElementRef, OnInit } from '@angular/core';
import { ControlValueAccessor, FormGroupDirective, NgForm, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { IAliasController } from '@core/api/widget-api.models';
import { MatAutocomplete } from '@angular/material/autocomplete';
import { ErrorStateMatcher } from '@angular/material/core';
import { FilterSelectCallbacks } from './filter-select.component.models';
import { Filter } from '@shared/models/query/query.models';
import { MatFormFieldAppearance, SubscriptSizing } from '@angular/material/form-field';
import * as i0 from "@angular/core";
export declare class FilterSelectComponent implements ControlValueAccessor, OnInit, ErrorStateMatcher {
    private errorStateMatcher;
    private fb;
    private destroyRef;
    selectFilterFormGroup: UntypedFormGroup;
    modelValue: string | null;
    aliasController: IAliasController;
    callbacks: FilterSelectCallbacks;
    showLabel: boolean;
    inlineField: boolean;
    appearance: MatFormFieldAppearance;
    subscriptSizing: SubscriptSizing;
    filterAutocomplete: MatAutocomplete;
    tbRequired: boolean;
    disabled: boolean;
    filterInput: ElementRef;
    filteredFilters: Observable<Array<Filter>>;
    searchText: string;
    private dirty;
    private filterList;
    private propagateChange;
    constructor(errorStateMatcher: ErrorStateMatcher, fb: UntypedFormBuilder, destroyRef: DestroyRef);
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    ngOnInit(): void;
    isErrorState(control: UntypedFormControl | null, form: FormGroupDirective | NgForm | null): boolean;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string | null): void;
    onFocus(): void;
    updateView(value: Filter | null): void;
    displayFilterFn(filter?: Filter): string | undefined;
    fetchFilters(searchText?: string): Observable<Array<Filter>>;
    clear(value?: string): void;
    textIsNotEmpty(text: string): boolean;
    filterEnter($event: KeyboardEvent): void;
    createFilter($event: Event, filter: string, focusOnCancel?: boolean): void;
    private loadFilters;
    static ɵfac: i0.ɵɵFactoryDeclaration<FilterSelectComponent, [{ skipSelf: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FilterSelectComponent, "tb-filter-select", never, { "aliasController": { "alias": "aliasController"; "required": false; }; "callbacks": { "alias": "callbacks"; "required": false; }; "showLabel": { "alias": "showLabel"; "required": false; }; "inlineField": { "alias": "inlineField"; "required": false; }; "appearance": { "alias": "appearance"; "required": false; }; "subscriptSizing": { "alias": "subscriptSizing"; "required": false; }; "tbRequired": { "alias": "tbRequired"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, {}, never, never, false, never>;
}
