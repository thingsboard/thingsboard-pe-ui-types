import { DestroyRef, ElementRef, OnChanges, OnInit, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormControl, FormGroup, FormGroupDirective, NgForm, Validator } from '@angular/forms';
import { Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { MatAutocomplete, MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { MatChipGrid, MatChipInputEvent, MatChipRow } from '@angular/material/chips';
import { DataKeyType } from '@shared/models/telemetry/telemetry.models';
import { DataKey, Datasource, DatasourceType, Widget, widgetType } from '@shared/models/widget.models';
import { IAliasController } from '@core/api/widget-api.models';
import { DataKeySettingsFunction } from './data-keys.component.models';
import { UtilsService } from '@core/services/utils.service';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatDialog } from '@angular/material/dialog';
import { Dashboard } from '@shared/models/dashboard.models';
import { DndDropEvent } from 'ngx-drag-drop/lib/dnd-dropzone.directive';
import { TbPopoverService } from '@shared/components/popover.service';
import { WidgetConfigCallbacks } from '@home/components/widget/config/widget-config.component.models';
import { FormProperty } from '@shared/models/dynamic-form.models';
import { MatFormFieldAppearance, SubscriptSizing } from '@angular/material/form-field';
import * as i0 from "@angular/core";
export declare class DataKeysComponent implements ControlValueAccessor, OnInit, OnChanges, ErrorStateMatcher, Validator {
    private errorStateMatcher;
    private translate;
    private utils;
    private dialog;
    private fb;
    private popoverService;
    private viewContainerRef;
    private renderer;
    private destroyRef;
    hostClass: string;
    label: string;
    appearance: MatFormFieldAppearance;
    subscriptSizing: SubscriptSizing;
    inlineField: boolean;
    reportMode: boolean;
    hideDataKeyLabel: boolean;
    hideDataKeyColor: boolean;
    hideDataKeyUnits: boolean;
    hideDataKeyDecimals: boolean;
    disableDrag: boolean;
    widgetTypes: typeof widgetType;
    dataKeyTypes: typeof DataKeyType;
    keysListFormGroup: FormGroup;
    modelValue: Array<DataKey> | null;
    widgetType: widgetType;
    datasourceType: DatasourceType;
    private maxDataKeysValue;
    get maxDataKeys(): number;
    set maxDataKeys(value: number);
    optDataKeys: boolean;
    latestDataKeys: boolean;
    simpleDataKeysLabel: boolean;
    supportsUnitConversion: boolean;
    aliasController: IAliasController;
    dataKeySettingsForm: FormProperty[];
    datakeySettingsFunction: DataKeySettingsFunction;
    dataKeySettingsDirective: string;
    dashboard: Dashboard;
    widget: Widget;
    callbacks: WidgetConfigCallbacks;
    entityAliasId: string;
    deviceId: string;
    datasources: Datasource[];
    generateKey: (key: DataKey) => DataKey;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    disabled: boolean;
    keyInput: ElementRef<HTMLInputElement>;
    matAutocomplete: MatAutocomplete;
    autocomplete: MatAutocompleteTrigger;
    chipList: MatChipGrid;
    keys: Array<DataKey>;
    filteredKeys: Observable<Array<DataKey>>;
    separatorKeysCodes: number[];
    alarmKeys: Array<DataKey>;
    functionTypeKeys: Array<DataKey>;
    dataKeyType: DataKeyType;
    placeholder: string;
    secondaryPlaceholder: string;
    requiredText: string;
    searchText: string;
    dndId: string;
    dragIndex: number;
    private latestSearchTextResult;
    private fetchObservable$;
    private dirty;
    private propagateChange;
    private keysRequired;
    private keysValidator;
    constructor(errorStateMatcher: ErrorStateMatcher, translate: TranslateService, utils: UtilsService, dialog: MatDialog, fb: FormBuilder, popoverService: TbPopoverService, viewContainerRef: ViewContainerRef, renderer: Renderer2, destroyRef: DestroyRef);
    updateValidators(): void;
    private _keysRequired;
    private _keysValidator;
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    ngOnInit(): void;
    maxDataKeysText(): string;
    private updateParams;
    private reset;
    ngOnChanges(changes: SimpleChanges): void;
    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: Array<DataKey> | null): void;
    validate(_c: FormControl): {
        dataKeys: {
            valid: boolean;
        };
    };
    onFocus(): void;
    private addFromChipValue;
    addKey(key: DataKey): void;
    add(event: MatChipInputEvent): void;
    remove(key: DataKey): void;
    chipDragStart(index: number, chipRow: MatChipRow, placeholderChipRow: Element): void;
    chipDragEnd(): void;
    onChipDrop(event: DndDropEvent): void;
    openColorPickerPopup(key: DataKey, $event: Event, keyColorButton: HTMLDivElement): void;
    editDataKey(key: DataKey, index: number): void;
    createKey(name: string, dataKeyType?: DataKeyType): void;
    displayKeyFn(key?: DataKey): string | undefined;
    dataKeyHasAggregation(key: DataKey): boolean;
    dataKeyHasPostprocessing(key: DataKey): boolean;
    private fetchKeys;
    private getKeys;
    private createDataKeyFilter;
    textIsNotEmpty(text: string): boolean;
    clear(value?: string, focus?: boolean): void;
    get isCountDatasource(): boolean;
    get isEntityDatasource(): boolean;
    get inputDisabled(): boolean;
    get dragDisabled(): boolean;
    get maxDataKeysSet(): boolean;
    private clearSearchCache;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataKeysComponent, [{ skipSelf: true; }, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataKeysComponent, "tb-data-keys", never, { "label": { "alias": "label"; "required": false; }; "appearance": { "alias": "appearance"; "required": false; }; "subscriptSizing": { "alias": "subscriptSizing"; "required": false; }; "inlineField": { "alias": "inlineField"; "required": false; }; "reportMode": { "alias": "reportMode"; "required": false; }; "hideDataKeyLabel": { "alias": "hideDataKeyLabel"; "required": false; }; "hideDataKeyColor": { "alias": "hideDataKeyColor"; "required": false; }; "hideDataKeyUnits": { "alias": "hideDataKeyUnits"; "required": false; }; "hideDataKeyDecimals": { "alias": "hideDataKeyDecimals"; "required": false; }; "disableDrag": { "alias": "disableDrag"; "required": false; }; "widgetType": { "alias": "widgetType"; "required": false; }; "datasourceType": { "alias": "datasourceType"; "required": false; }; "maxDataKeys": { "alias": "maxDataKeys"; "required": false; }; "optDataKeys": { "alias": "optDataKeys"; "required": false; }; "latestDataKeys": { "alias": "latestDataKeys"; "required": false; }; "simpleDataKeysLabel": { "alias": "simpleDataKeysLabel"; "required": false; }; "supportsUnitConversion": { "alias": "supportsUnitConversion"; "required": false; }; "aliasController": { "alias": "aliasController"; "required": false; }; "dataKeySettingsForm": { "alias": "dataKeySettingsForm"; "required": false; }; "datakeySettingsFunction": { "alias": "datakeySettingsFunction"; "required": false; }; "dataKeySettingsDirective": { "alias": "dataKeySettingsDirective"; "required": false; }; "dashboard": { "alias": "dashboard"; "required": false; }; "widget": { "alias": "widget"; "required": false; }; "callbacks": { "alias": "callbacks"; "required": false; }; "entityAliasId": { "alias": "entityAliasId"; "required": false; }; "deviceId": { "alias": "deviceId"; "required": false; }; "datasources": { "alias": "datasources"; "required": false; }; "generateKey": { "alias": "generateKey"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, {}, never, never, false, never>;
}
