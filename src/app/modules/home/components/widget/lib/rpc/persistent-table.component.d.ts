import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { WidgetContext } from '@home/models/widget-component.models';
import { IWidgetSubscription } from '@core/api/widget-api.models';
import { Observable, ReplaySubject } from 'rxjs';
import { TableCellButtonActionDescriptor } from '@home/components/widget/lib/table-widget.models';
import { UtilsService } from '@core/services/utils.service';
import { TranslateService } from '@ngx-translate/core';
import { CollectionViewer, DataSource } from '@angular/cdk/collections';
import { PageData } from '@shared/models/page/page-data';
import { PersistentRpc, PersistentRpcData, RpcStatus } from '@shared/models/rpc.models';
import { PageLink } from '@shared/models/page/page-link';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { DialogService } from '@core/services/dialog.service';
import { DeviceService } from '@core/http/device.service';
import { MatDialog } from '@angular/material/dialog';
import { Overlay } from '@angular/cdk/overlay';
import * as i0 from "@angular/core";
interface PersistentTableWidgetActionDescriptor extends TableCellButtonActionDescriptor {
    details?: boolean;
    delete?: boolean;
}
export declare class PersistentTableComponent extends PageComponent implements OnInit, OnDestroy, AfterViewInit {
    protected store: Store<AppState>;
    private elementRef;
    private overlay;
    private viewContainerRef;
    private utils;
    private translate;
    private dialogService;
    private deviceService;
    private dialog;
    private cd;
    private zone;
    ctx: WidgetContext;
    paginator: MatPaginator;
    sort: MatSort;
    private settings;
    private widgetConfig;
    private subscription;
    private enableFilterAction;
    private allowSendRequest;
    private defaultPageSize;
    private defaultSortOrder;
    private rpcStatusFilter;
    private displayDetails;
    private allowDelete;
    private displayTableColumns;
    private widgetResize$;
    persistentDatasource: PersistentDatasource;
    noDataDisplayMessageText: string;
    rpcStatusColor: Map<RpcStatus, string>;
    rpcStatusTranslation: Map<RpcStatus, string>;
    displayPagination: boolean;
    enableStickyHeader: boolean;
    enableStickyAction: boolean;
    pageLink: PageLink;
    pageSizeOptions: any[];
    actionCellButtonAction: PersistentTableWidgetActionDescriptor[];
    displayedColumns: string[];
    hidePageSize: boolean;
    hasData: boolean;
    constructor(store: Store<AppState>, elementRef: ElementRef, overlay: Overlay, viewContainerRef: ViewContainerRef, utils: UtilsService, translate: TranslateService, dialogService: DialogService, deviceService: DeviceService, dialog: MatDialog, cd: ChangeDetectorRef, zone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    private initializeConfig;
    private updateData;
    onDataUpdated(): void;
    reloadPersistentRequests(): void;
    deleteRpcRequest($event: Event, persistentRpc: PersistentRpc): void;
    openRequestDetails($event: Event, persistentRpc: PersistentRpc): void;
    addPersistentRpcRequest($event: Event): void;
    private sendRequests;
    onActionButtonClick($event: Event, persistentRpc: PersistentRpc, actionDescriptor: PersistentTableWidgetActionDescriptor): void;
    private editFilter;
    protected readonly rpcStatusColorsMap: Map<RpcStatus, string>;
    static ɵfac: i0.ɵɵFactoryDeclaration<PersistentTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PersistentTableComponent, "tb-persistent-table-widget", never, { "ctx": { "alias": "ctx"; "required": false; }; }, {}, never, never, false, never>;
}
declare class PersistentDatasource implements DataSource<PersistentRpcData> {
    private translate;
    private subscription;
    private ctx;
    private persistentSubject;
    private pageDataSubject;
    private rpcErrorText;
    private executingSubjects;
    private executingRpcRequest;
    dataLoading: boolean;
    pageData$: Observable<PageData<PersistentRpcData>>;
    constructor(translate: TranslateService, subscription: IWidgetSubscription, ctx: WidgetContext);
    connect(collectionViewer: CollectionViewer): Observable<PersistentRpcData[] | ReadonlyArray<PersistentRpcData>>;
    disconnect(collectionViewer: CollectionViewer): void;
    reset(): void;
    loadPersistent(pageLink: PageLink, rpcStatusFilter: RpcStatus): ReplaySubject<PageData<PersistentRpcData>>;
    fetchEntities(pageLink: PageLink, rpcStatusFilter: RpcStatus): Observable<PageData<PersistentRpcData>>;
    isEmpty(): Observable<boolean>;
    total(): Observable<number>;
}
export {};
