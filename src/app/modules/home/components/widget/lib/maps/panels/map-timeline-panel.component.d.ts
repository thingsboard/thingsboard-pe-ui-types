import { ChangeDetectorRef, DestroyRef, ElementRef, EventEmitter, Injector, OnDestroy, OnInit } from '@angular/core';
import { TripTimelineSettings } from '@shared/models/widget/maps/map.models';
import { DateFormatProcessor } from '@shared/models/widget-settings.models';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export declare class MapTimelinePanelComponent implements OnInit, OnDestroy {
    element: ElementRef<HTMLElement>;
    private cd;
    private destroyRef;
    private injector;
    settings: TripTimelineSettings;
    disabled: boolean;
    set min(value: number);
    get min(): number;
    set max(value: number);
    get max(): number;
    set currentTime(time: number);
    get currentTime(): number;
    get hasData(): boolean;
    set panelElement(element: Element);
    get panelElement(): Element;
    anchors: number[];
    timeChanged: EventEmitter<number>;
    column: boolean;
    timestampFormat: DateFormatProcessor;
    minTimeIndex: number;
    maxTimeIndex: number;
    index: number;
    playing: boolean;
    interval: Subscription;
    speed: number;
    private minValue;
    private maxValue;
    private currentTimeValue;
    private panelResize$;
    private panelElementVal;
    constructor(element: ElementRef<HTMLElement>, cd: ChangeDetectorRef, destroyRef: DestroyRef, injector: Injector);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onIndexChange(index: number): void;
    play(): void;
    pause(): void;
    fastRewind(): void;
    fastForward(): void;
    moveNext(): void;
    movePrev(): void;
    speedUpdated(): void;
    private resize;
    private updateCurrentTime;
    private updateTimestampDisplayValue;
    private findIndex;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapTimelinePanelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MapTimelinePanelComponent, "tb-map-timeline-panel", never, { "settings": { "alias": "settings"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "currentTime": { "alias": "currentTime"; "required": false; }; "anchors": { "alias": "anchors"; "required": false; }; }, { "timeChanged": "timeChanged"; }, never, never, false, never>;
}
