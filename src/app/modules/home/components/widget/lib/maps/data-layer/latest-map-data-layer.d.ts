import { MapDataLayerSettings, TbMapDatasource } from '@shared/models/widget/maps/map.models';
import { TbMap } from '@home/components/widget/lib/maps/map';
import { FormattedData } from '@shared/models/widget.models';
import { Observable } from 'rxjs';
import L from 'leaflet';
import { TbDataLayerItem, TbMapDataLayer } from '@home/components/widget/lib/maps/data-layer/map-data-layer';
export declare abstract class TbLatestDataLayerItem<S extends MapDataLayerSettings = MapDataLayerSettings, D extends TbLatestMapDataLayer<S, D> = TbLatestMapDataLayer<any>, L extends L.Layer = L.Layer> extends TbDataLayerItem<S, D, L> {
    protected tooltip: L.Popup;
    protected data: FormattedData<TbMapDatasource>;
    protected selected: boolean;
    protected constructor(data: FormattedData<TbMapDatasource>, dsData: FormattedData<TbMapDatasource>[], settings: S, dataLayer: D);
    invalidateCoordinates(): void;
    select(): L.TB.ToolbarButtonOptions[];
    deselect(cancel?: boolean, force?: boolean): boolean;
    isSelected(): boolean;
    editModeUpdated(): void;
    dragModeUpdated(): void;
    update(data: FormattedData<TbMapDatasource>, dsData: FormattedData<TbMapDatasource>[]): void;
    remove(): void;
    isEditing(): boolean;
    protected bindEvents(): void;
    protected enableEdit(): void;
    protected disableEdit(): void;
    protected updateSelectedState(): void;
    protected updateTooltip(data: FormattedData<TbMapDatasource>, dsData: FormattedData<TbMapDatasource>[]): void;
    protected updateLabel(data: FormattedData<TbMapDatasource>, dsData: FormattedData<TbMapDatasource>[]): void;
    protected canDeselect(cancel?: boolean): boolean;
    protected onSelected(): L.TB.ToolbarButtonOptions[];
    protected onDeselected(): void;
    protected abstract create(data: FormattedData<TbMapDatasource>, dsData: FormattedData<TbMapDatasource>[]): L;
    protected abstract doUpdate(data: FormattedData<TbMapDatasource>, dsData: FormattedData<TbMapDatasource>[]): void;
    protected abstract doInvalidateCoordinates(data: FormattedData<TbMapDatasource>, dsData: FormattedData<TbMapDatasource>[]): void;
    protected abstract unbindLabel(): void;
    protected abstract bindLabel(content: L.Content): void;
    protected abstract addItemClass(clazz: string): void;
    protected abstract removeItemClass(clazz: string): void;
    protected abstract enableDrag(): void;
    protected abstract disableDrag(): void;
    protected abstract updateBubblingMouseEvents(): void;
    protected abstract removeDataItemTitle(): string;
    protected abstract removeDataItem(): Observable<any>;
}
export interface UnplacedMapDataItem {
    entity: FormattedData<TbMapDatasource>;
    dataLayer: TbLatestMapDataLayer;
}
export declare abstract class TbLatestMapDataLayer<S extends MapDataLayerSettings = MapDataLayerSettings, D extends TbLatestMapDataLayer<S, D> = any, L extends L.Layer = L.Layer> extends TbMapDataLayer<S, TbLatestDataLayerItem<S, D, L>> implements L.TB.DataLayer {
    protected addEnabled: boolean;
    protected dragEnabled: boolean;
    protected editEnabled: boolean;
    protected removeEnabled: boolean;
    protected editable: boolean;
    protected selectable: boolean;
    protected hoverable: boolean;
    private editMode;
    private unplacedItems;
    protected constructor(map: TbMap<any>, inputSettings: S);
    isEditMode(): boolean;
    isAddEnabled(): boolean;
    isDragEnabled(): boolean;
    allowDrag(): boolean;
    isEditEnabled(): boolean;
    isRemoveEnabled(): boolean;
    isEditable(): boolean;
    isHoverable(): boolean;
    isSelectable(): boolean;
    isSnappable(): boolean;
    updateData(dsData: FormattedData<TbMapDatasource>[]): void;
    hasUnplacedItems(): boolean;
    getUnplacedItems(): UnplacedMapDataItem[];
    enableEditMode(): void;
    disableEditMode(): void;
    dragModeUpdated(): void;
    protected createDataLayerContainer(): L.FeatureGroup;
    protected onDataLayerEnabled(): void;
    protected onDataLayerDisabled(): void;
    protected createItemFromUnplaced(unplacedItem: UnplacedMapDataItem): void;
    protected layerItemsUpdated(_updatedItems: TbLatestDataLayerItem<S, D, L>[]): void;
    private prepareUnplacedItems;
    private updateItemsEditMode;
    private updateItemsDragMode;
    abstract placeItem(item: UnplacedMapDataItem, layer: L.Layer): void;
    protected abstract isValidLayerData(layerData: FormattedData<TbMapDatasource>): boolean;
    protected abstract createLayerItem(data: FormattedData<TbMapDatasource>, dsData: FormattedData<TbMapDatasource>[]): TbLatestDataLayerItem<S, D, L>;
}
