import { BaseMapSettings, DataKeyValuePair, MapBooleanFunction, MapType, TbCircleData, TbMapDatasource, TbPolygonCoordinates, TbPolygonRawCoordinates } from '@shared/models/widget/maps/map.models';
import { WidgetContext } from '@home/models/widget-component.models';
import { DeepPartial } from '@shared/models/common';
import L from 'leaflet';
import { Observable } from 'rxjs';
import '@home/components/widget/lib/maps/leaflet/leaflet-tb';
import { TbLatestDataLayerItem, TbLatestMapDataLayer } from '@home/components/widget/lib/maps/data-layer/latest-map-data-layer';
import { PlaceMapItemActionData } from '@core/api/widget-api.models';
import { FormattedData, WidgetAction } from '@shared/models/widget.models';
import { AttributeScope } from '@shared/models/telemetry/telemetry.models';
import { MapTimelinePanelComponent } from '@home/components/widget/lib/maps/panels/map-timeline-panel.component';
import { ComponentRef } from '@angular/core';
import { TbTripsDataLayer } from '@home/components/widget/lib/maps/data-layer/trips-data-layer';
import { CompiledTbFunction } from '@shared/models/js-function.models';
import { TbMapDataLayer } from '@home/components/widget/lib/maps/data-layer/map-data-layer';
import { ShapePatternStorage } from '@home/components/widget/lib/maps/data-layer/shapes-data-layer';
export declare abstract class TbMap<S extends BaseMapSettings> {
    protected ctx: WidgetContext;
    protected inputSettings: DeepPartial<S>;
    protected containerElement: HTMLElement;
    protected settings: S;
    protected map: L.Map;
    protected defaultCenterPosition: [number, number];
    protected ignoreUpdateBounds: boolean;
    protected bounds: L.LatLngBounds;
    protected southWest: L.LatLng;
    protected northEast: L.LatLng;
    protected dataLayers: TbMapDataLayer[];
    protected latestDataLayers: TbLatestMapDataLayer[];
    protected tripDataLayers: TbTripsDataLayer[];
    protected dsData: FormattedData<TbMapDatasource>[];
    protected timeline: boolean;
    protected minTime: number;
    protected maxTime: number;
    protected timeStep: number;
    protected currentTime: number;
    protected selectedDataItem: TbLatestDataLayerItem;
    protected mapLayoutElement: HTMLElement;
    protected mapElement: HTMLElement;
    protected sidebar: L.TB.SidebarControl;
    protected customActionsToolbar: L.TB.TopToolbarControl;
    protected editToolbar: L.TB.BottomToolbarControl;
    protected dragModeButton: L.TB.ToolbarButton;
    protected addMarkerButton: L.TB.ToolbarButton;
    protected addRectangleButton: L.TB.ToolbarButton;
    protected addPolygonButton: L.TB.ToolbarButton;
    protected addCircleButton: L.TB.ToolbarButton;
    protected timeLineComponentRef: ComponentRef<MapTimelinePanelComponent>;
    protected timeLineComponent: MapTimelinePanelComponent;
    protected locationSnapFilterFunction: CompiledTbFunction<MapBooleanFunction>;
    protected addMarkerDataLayers: TbLatestMapDataLayer<any>[];
    protected addPolygonDataLayers: TbLatestMapDataLayer<any>[];
    protected addCircleDataLayers: TbLatestMapDataLayer<any>[];
    protected shapePatternStorage: ShapePatternStorage;
    protected mapUuid: string;
    private readonly mapResize$;
    private tooltipInstances;
    private currentPopover;
    private currentEditButton;
    private dragMode;
    private createMapItemActionId;
    private get isPlacingItem();
    private dataLayersSubscription;
    private tripDataLayersSubscription;
    protected constructor(ctx: WidgetContext, inputSettings: DeepPartial<S>, containerElement: HTMLElement);
    private setupControls;
    private initMap;
    private setupDataLayers;
    private setupEditMode;
    private toggleDragMode;
    private disableDragMode;
    private placeMarker;
    private drawRectangle;
    private drawPolygon;
    private drawCircle;
    private placeItem;
    private selectEntityToPlace;
    private setupCustomActions;
    placeMapItem(actionData: PlaceMapItemActionData): void;
    private createMarker;
    private createRectangle;
    private createPolygon;
    private createCircle;
    private createItem;
    private finishCreatedItem;
    private finishAdd;
    private prepareDrawMode;
    private updatePlaceItemState;
    private createdControlButtonTooltip;
    private customDataExport;
    private update;
    private updateTrips;
    private updateTripsWithLatestData;
    private updateTripsAppearance;
    private updateTripsTime;
    private updateTripsAnchors;
    private calculateCurrentTime;
    private resize;
    private updateBounds;
    private updateEditButtonsStates;
    private setPlaceMarkerStyle;
    protected abstract defaultSettings(): S;
    protected abstract createMap(): Observable<L.Map>;
    protected abstract onResize(): void;
    protected abstract fitBounds(bounds: L.LatLngBounds): void;
    protected doSetupControls(): Observable<any>;
    protected invalidateDataLayersCoordinates(): void;
    protected getSidebar(): L.TB.SidebarControl;
    getCtx(): WidgetContext;
    getData(): FormattedData<TbMapDatasource>[];
    getMap(): L.Map;
    type(): MapType;
    useShapePattern(patternId: string, prevPatternId?: string): L.TB.Pattern;
    unUseShapePattern(patternId: string): void;
    storeShapePattern(patternId: string, pattern: L.TB.Pattern): void;
    enabledDataLayersUpdated(): void;
    dataItemClick($event: Event, action: WidgetAction, data: FormattedData<TbMapDatasource>): void;
    selectItem(item: TbLatestDataLayerItem, cancel?: boolean, force?: boolean): boolean;
    deselectItem(cancel?: boolean, force?: boolean): boolean;
    getEditToolbar(): L.TB.BottomToolbarControl;
    useDragModeButton(): boolean;
    dragModeEnabled(): boolean;
    saveMarkerLocation(data: FormattedData<TbMapDatasource>, lat?: number, lng?: number): Observable<any>;
    savePolygonLocation(data: FormattedData<TbMapDatasource>, coordinates?: TbPolygonCoordinates): Observable<any>;
    saveLocation(data: FormattedData<TbMapDatasource>, values: {
        [key: string]: any;
    }): Observable<any>;
    saveItemData(datasource: TbMapDatasource, data: DataKeyValuePair[], attributeScope: AttributeScope): Observable<any>;
    hasTimeline(): boolean;
    getMinTime(): number;
    getMaxTime(): number;
    getTimeStep(): number;
    getCurrentTime(): number;
    getLocationSnapFilterFunction(): CompiledTbFunction<MapBooleanFunction>;
    destroy(): void;
    abstract locationDataToLatLng(position: {
        x: number;
        y: number;
    }): L.LatLng;
    abstract latLngToLocationData(position: L.LatLng): {
        x: number;
        y: number;
    };
    abstract polygonDataToCoordinates(coordinates: TbPolygonRawCoordinates): TbPolygonRawCoordinates;
    abstract coordinatesToPolygonData(coordinates: TbPolygonCoordinates): TbPolygonRawCoordinates;
    abstract circleDataToCoordinates(circle: TbCircleData): TbCircleData;
    abstract coordinatesToCircleData(center: L.LatLng, radius: number): TbCircleData;
}
