import { AfterViewInit, ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { WidgetUnitedTripAnimationSettings } from '@home/components/widget/lib/maps-legacy/map-models';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { WidgetContext } from '@app/modules/home/models/widget-component.models';
import { FormattedData, WidgetConfig } from '@shared/models/widget.models';
import { MapWidgetInterface } from '@home/components/widget/lib/maps-legacy/map-widget.interface';
import * as i0 from "@angular/core";
export declare class TripAnimationComponent implements OnInit, AfterViewInit, OnDestroy {
    private cd;
    private sanitizer;
    private mapResize$;
    private initialized;
    private updatePending;
    private mapWidgetUpdatePending;
    constructor(cd: ChangeDetectorRef, sanitizer: DomSanitizer);
    ctx: WidgetContext;
    mapContainer: any;
    mapWidget: MapWidgetInterface;
    historicalData: FormattedData[][];
    normalizationStep: number;
    interpolatedTimeData: {
        [time: number]: FormattedData;
    }[];
    formattedInterpolatedTimeData: FormattedData[][];
    formattedCurrentPosition: FormattedData[];
    formattedLatestData: FormattedData[];
    widgetConfig: WidgetConfig;
    settings: WidgetUnitedTripAnimationSettings;
    mainTooltips: any[];
    visibleTooltip: boolean;
    activeTrip: FormattedData;
    label: SafeHtml;
    minTime: number;
    maxTime: number;
    anchors: number[];
    useAnchors: boolean;
    currentTime: number;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    timeUpdated(time: number): void;
    private initializeFunctions;
    private update;
    private latestDataUpdate;
    private updateMapWidget;
    private updateCurrentData;
    setActiveTrip(): void;
    private calculateLastPoints;
    calculateIntervals(): void;
    calcTooltip: (point: FormattedData, points: FormattedData[]) => string;
    private calcMainTooltip;
    calcLabel(points: FormattedData[]): void;
    private interpolateArray;
    private calculateCurrentTime;
    private clearIncorrectFirsLastDatapoint;
    private findFirstHistoricalDataIndexCoordinate;
    static ɵfac: i0.ɵɵFactoryDeclaration<TripAnimationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TripAnimationComponent, "trip-animation", never, { "ctx": { "alias": "ctx"; "required": false; }; }, {}, never, never, false, never>;
}
export declare const TbTripAnimationWidget: typeof TripAnimationComponent;
