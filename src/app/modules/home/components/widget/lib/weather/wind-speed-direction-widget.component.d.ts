import { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { WidgetContext } from '@home/models/widget-component.models';
import { WindSpeedDirectionLayout, WindSpeedDirectionWidgetSettings } from '@home/components/widget/lib/weather/wind-speed-direction-widget.models';
import { ColorProcessor, ComponentStyle } from '@shared/models/widget-settings.models';
import { Observable } from 'rxjs';
import { ImagePipe } from '@shared/pipe/image.pipe';
import { DomSanitizer } from '@angular/platform-browser';
import { UnitService } from '@core/services/unit.service';
import * as i0 from "@angular/core";
export declare class WindSpeedDirectionWidgetComponent implements OnInit, OnDestroy, AfterViewInit {
    private imagePipe;
    private unitService;
    private sanitizer;
    private renderer;
    private cd;
    windSpeedDirectionShape: ElementRef<HTMLElement>;
    settings: WindSpeedDirectionWidgetSettings;
    ctx: WidgetContext;
    widgetTitlePanel: TemplateRef<any>;
    layout: WindSpeedDirectionLayout;
    centerValueColor: ColorProcessor;
    backgroundStyle$: Observable<ComponentStyle>;
    overlayStyle: ComponentStyle;
    padding: string;
    shapeResize$: ResizeObserver;
    hasCardClickAction: boolean;
    private drawSvgShapePending;
    private svgShape;
    private arrow;
    private centerValueTextNode;
    private units;
    private valueFormat;
    private windDirectionDataKey;
    private centerValueDataKey;
    private windDirection;
    private centerValueText;
    constructor(imagePipe: ImagePipe, unitService: UnitService, sanitizer: DomSanitizer, renderer: Renderer2, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onInit(): void;
    onDataUpdated(): void;
    cardClick($event: Event): void;
    private drawSvg;
    private drawTickText;
    private renderValues;
    private renderCenterValueText;
    private onResize;
    static ɵfac: i0.ɵɵFactoryDeclaration<WindSpeedDirectionWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WindSpeedDirectionWidgetComponent, "tb-wind-speed-direction-widget", never, { "ctx": { "alias": "ctx"; "required": false; }; "widgetTitlePanel": { "alias": "widgetTitlePanel"; "required": false; }; }, {}, never, never, false, never>;
}
