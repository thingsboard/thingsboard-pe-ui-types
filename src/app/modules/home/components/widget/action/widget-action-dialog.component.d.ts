import { DestroyRef, OnInit } from '@angular/core';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatDialogRef } from '@angular/material/dialog';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { FormBuilder, FormControl, FormGroup, FormGroupDirective, NgForm } from '@angular/forms';
import { Router } from '@angular/router';
import { DialogComponent } from '@app/shared/components/dialog.component';
import { WidgetActionCallbacks, WidgetActionDescriptorInfo, WidgetActionsData } from '@home/components/widget/action/manage-widget-actions.component.models';
import { UtilsService } from '@core/services/utils.service';
import { CellClickColumnInfo, WidgetActionSource, WidgetActionType, WidgetHeaderActionButtonType, widgetType } from '@shared/models/widget.models';
import { WidgetService } from '@core/http/widget.service';
import { MatSelect } from '@angular/material/select';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export interface WidgetActionDialogData {
    isAdd: boolean;
    callbacks: WidgetActionCallbacks;
    actionsData: WidgetActionsData;
    actionTypes: WidgetActionType[];
    customFunctionArgs: string[];
    action?: WidgetActionDescriptorInfo;
    widgetType: widgetType;
    defaultIconColor?: string;
    additionalWidgetActionTypes?: WidgetActionType[];
    isEntityGroup?: boolean;
}
export declare class WidgetActionDialogComponent extends DialogComponent<WidgetActionDialogComponent, WidgetActionDescriptorInfo> implements OnInit, ErrorStateMatcher {
    protected store: Store<AppState>;
    protected router: Router;
    private utils;
    private widgetService;
    data: WidgetActionDialogData;
    private errorStateMatcher;
    dialogRef: MatDialogRef<WidgetActionDialogComponent, WidgetActionDescriptorInfo>;
    fb: FormBuilder;
    private translate;
    private destroyRef;
    widgetActionFormGroup: FormGroup;
    isAdd: boolean;
    action: WidgetActionDescriptorInfo;
    customFunctionArgs: string[];
    widgetActionTypes: WidgetActionType[];
    defaultIconColor: string;
    customActionEditorCompleter: import("../../../../../shared/models/ace/completion.models").TbEditorCompleter;
    submitted: boolean;
    functionScopeVariables: string[];
    private isEntityGroup;
    configuredColumns: Array<CellClickColumnInfo>;
    usedCellClickColumns: Array<number>;
    widgetHeaderActionButtonType: typeof WidgetHeaderActionButtonType;
    widgetHeaderActionButtonTypes: WidgetHeaderActionButtonType[];
    widgetHeaderActionButtonTypeTranslationMap: Map<WidgetHeaderActionButtonType, string>;
    columnIndexSelect: MatSelect;
    columnIndexPlaceholderText: any;
    constructor(store: Store<AppState>, router: Router, utils: UtilsService, widgetService: WidgetService, data: WidgetActionDialogData, errorStateMatcher: ErrorStateMatcher, dialogRef: MatDialogRef<WidgetActionDialogComponent, WidgetActionDescriptorInfo>, fb: FormBuilder, translate: TranslateService, destroyRef: DestroyRef);
    ngOnInit(): void;
    private widgetHeaderButtonValidators;
    displayShowWidgetActionForm(): boolean;
    customFunctionHelpId(): string;
    entityGroupRowClickHint(): string;
    getWidgetActionFunctionHelpId(): string | undefined;
    private updateShowWidgetActionForm;
    private checkColumnIndex;
    private getCellClickColumnsInfo;
    private validateActionName;
    private checkActionName;
    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;
    actionSourceName(actionSource: WidgetActionSource): string;
    getCellClickColumnInfo(index: number, columnInfo: CellClickColumnInfo): string;
    cancel(): void;
    save(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetActionDialogComponent, [null, null, null, null, null, { skipSelf: true; }, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WidgetActionDialogComponent, "tb-widget-action-dialog", never, {}, {}, never, never, false, never>;
}
