import { ElementRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { Converter, ConverterType } from '@shared/models/converter.models';
import { ConverterService } from '@core/http/converter.service';
import { ConverterId } from '@shared/models/id/converter-id';
import { MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { MatDialog } from '@angular/material/dialog';
import { Operation, Resource } from '@shared/models/security.models';
import { IntegrationType } from '@shared/models/integration.models';
import * as i0 from "@angular/core";
export declare class ConverterAutocompleteComponent implements ControlValueAccessor, OnInit, OnChanges {
    private converterService;
    private dialog;
    private fb;
    selectConverterFormGroup: FormGroup;
    private modelValue;
    useFullEntityId: boolean;
    isEdgeTemplate: boolean;
    addNewConverter: boolean;
    converterType: ConverterType;
    excludeEntityIds: Array<string>;
    labelText: string;
    requiredText: string;
    required: boolean;
    disabled: boolean;
    showDetailsPageLink: boolean;
    integrationType: IntegrationType;
    converterInput: ElementRef<HTMLElement>;
    converterAutocomplete: MatAutocompleteTrigger;
    filteredEntities: Observable<Array<Converter>>;
    searchText: string;
    converterURL: string;
    resource: typeof Resource;
    operation: typeof Operation;
    private dirty;
    private propagateChange;
    constructor(converterService: ConverterService, dialog: MatDialog, fb: FormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string | ConverterId | null): void;
    onFocus(): void;
    private reset;
    private updateView;
    displayEntityFn(converter?: Converter): string | undefined;
    private fetchEntities;
    clear(): void;
    textIsNotEmpty(text: string): boolean;
    createConverter($event: Event, converterName: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConverterAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ConverterAutocompleteComponent, "tb-converter-autocomplete", never, { "useFullEntityId": { "alias": "useFullEntityId"; "required": false; }; "isEdgeTemplate": { "alias": "isEdgeTemplate"; "required": false; }; "addNewConverter": { "alias": "addNewConverter"; "required": false; }; "converterType": { "alias": "converterType"; "required": false; }; "excludeEntityIds": { "alias": "excludeEntityIds"; "required": false; }; "labelText": { "alias": "labelText"; "required": false; }; "requiredText": { "alias": "requiredText"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "showDetailsPageLink": { "alias": "showDetailsPageLink"; "required": false; }; "integrationType": { "alias": "integrationType"; "required": false; }; }, {}, never, never, false, never>;
}
