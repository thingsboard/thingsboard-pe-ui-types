import { ChangeDetectorRef, DestroyRef, OnInit } from '@angular/core';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { EntityComponent } from '../entity/entity.component';
import { FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { Converter, ConverterDebugInput, ConverterType } from '@shared/models/converter.models';
import { ResourcesService } from '@core/services/resources.service';
import { ConverterService } from '@core/http/converter.service';
import { EntityTableConfig } from '@home/models/entity/entities-table-config.models';
import { MatDialog } from '@angular/material/dialog';
import { ScriptLanguage } from '@shared/models/rule-node.models';
import { Observable } from 'rxjs';
import { ConverterLibraryService } from '@core/http/converter-library.service';
import { EntityType } from '@shared/models/entity-type.models';
import { IntegrationService } from '@core/http/integration.service';
import { StringItemsOption } from '@shared/components/string-items-list.component';
import * as i0 from "@angular/core";
export declare class ConverterComponent extends EntityComponent<Converter> implements OnInit {
    protected store: Store<AppState>;
    protected translate: TranslateService;
    private converterService;
    private integrationService;
    private dialog;
    private resourcesService;
    private converterLibraryService;
    protected entityValue: Converter;
    protected entitiesTableConfigValue: EntityTableConfig<Converter>;
    protected fb: FormBuilder;
    protected cd: ChangeDetectorRef;
    private destroyRef;
    private predefinedConverterName;
    hideTypes: boolean;
    set converterName(value: string);
    libraryInfo: {
        vendorName: string;
        modelName: string;
    };
    integrationName: string;
    converterType: typeof ConverterType;
    converterTypes: ConverterType[];
    converterTypeTranslations: Map<ConverterType, string>;
    tbelEnabled: boolean;
    scriptLanguage: typeof ScriptLanguage;
    EntityType: typeof EntityType;
    predefinedKeys: Array<string>;
    entityTypeKeysTranslationMap: Map<EntityType, Record<string, string>>;
    private predefinedConverterKeys;
    private integrationsConvertersInfo;
    private defaultUpdateOnlyKeysByIntegrationType;
    private defaultConverterV2Configuration;
    constructor(store: Store<AppState>, translate: TranslateService, converterService: ConverterService, integrationService: IntegrationService, dialog: MatDialog, resourcesService: ResourcesService, converterLibraryService: ConverterLibraryService, entityValue: Converter, entitiesTableConfigValue: EntityTableConfig<Converter>, fb: FormBuilder, cd: ChangeDetectorRef, destroyRef: DestroyRef);
    ngOnInit(): void;
    hideDelete(): boolean;
    buildForm(entity: Converter): FormGroup;
    prepareFormValue(value: Converter): Converter;
    updatedValidators(): void;
    private checkIsNewConverter;
    private updatedOnlyKeysValue;
    private updateDefaultConfiguration;
    private onConverterTypeChanged;
    private updateConverterVersion;
    private updatedConverterVersionDisableState;
    private updateConfigurationEntityName;
    private updatedPredefinedConverterKeys;
    private onSetDefaultScriptBody;
    private setupDefaultScriptBody;
    updateForm(entity: Converter): void;
    onConverterIdCopied(): void;
    openConverterTestDialog(): void;
    get mainConfigurationTitle(): string;
    get functionFormControl(): FormControl;
    get functionName(): string;
    get functionArgs(): string[];
    get functionHelpId(): string;
    get functionHelpPopupStyle(): Record<string, string>;
    get testFunctionButtonLabel(): string;
    get fetchLatestKey(): (searchText?: string) => Observable<Array<StringItemsOption>>;
    private fetchConverterKeys;
    private getLibraryDebugIn;
    private getDefaultDebugIn;
    showConverterTestDialog(debugIn: ConverterDebugInput, setFirstTab?: boolean): void;
    private openTestDialog;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConverterComponent, [null, null, null, null, null, null, null, { optional: true; }, { optional: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ConverterComponent, "tb-converter", never, { "hideTypes": { "alias": "hideTypes"; "required": false; }; "converterName": { "alias": "converterName"; "required": false; }; "libraryInfo": { "alias": "libraryInfo"; "required": false; }; "integrationName": { "alias": "integrationName"; "required": false; }; }, {}, never, never, false, never>;
}
