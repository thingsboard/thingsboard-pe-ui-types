import { AfterViewInit, DestroyRef, ElementRef, QueryList, Renderer2, ViewContainerRef } from '@angular/core';
import { ErrorStateMatcher } from '@angular/material/core';
import { MatDialogRef } from '@angular/material/dialog';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { FormBuilder, FormControl, FormGroup, FormGroupDirective, NgForm } from '@angular/forms';
import { Router } from '@angular/router';
import { DialogComponent } from '@shared/components/dialog.component';
import { ContentType } from '@shared/models/constants';
import { JsonContentComponent } from '@shared/components/json-content.component';
import { Converter, ConverterDebugInput, ConverterMsg } from '@shared/models/converter.models';
import { ConverterService } from '@core/http/converter.service';
import { WhiteLabelingService } from '@core/http/white-labeling.service';
import { ScriptLanguage } from '@shared/models/rule-node.models';
import { MatButton } from '@angular/material/button';
import { TbPopoverService } from '@shared/components/popover.service';
import * as i0 from "@angular/core";
export interface ConverterTestDialogData {
    isDecoder: boolean;
    funcBody: string;
    scriptLang?: ScriptLanguage;
    debugIn: ConverterDebugInput;
    converter: Converter;
    originalMsg?: ConverterMsg;
}
export declare class ConverterTestDialogComponent extends DialogComponent<ConverterTestDialogComponent, string> implements AfterViewInit, ErrorStateMatcher {
    protected store: Store<AppState>;
    protected router: Router;
    protected dialogRef: MatDialogRef<ConverterTestDialogComponent, string>;
    private data;
    private errorStateMatcher;
    private fb;
    wl: WhiteLabelingService;
    private converterService;
    private destroyRef;
    private popoverService;
    private renderer;
    private viewContainerRef;
    width: string;
    height: string;
    topPanelElmRef: QueryList<ElementRef<HTMLElement>>;
    topLeftPanelElmRef: QueryList<ElementRef<HTMLElement>>;
    topRightPanelElmRef: QueryList<ElementRef<HTMLElement>>;
    bottomPanelElmRef: QueryList<ElementRef<HTMLElement>>;
    bottomLeftPanelElmRef: QueryList<ElementRef<HTMLElement>>;
    bottomRightPanelElmRef: QueryList<ElementRef<HTMLElement>>;
    payloadContent: JsonContentComponent;
    converterTestFormGroup: FormGroup;
    isDecoder: boolean;
    isConverterV2: boolean;
    submitted: boolean;
    outputFullscreen: boolean;
    contentType: typeof ContentType;
    contentTypes: ContentType[];
    contentTypesInfoMap: Map<ContentType, import("@shared/models/constants").ContentTypeData>;
    scriptLanguage: typeof ScriptLanguage;
    scriptLang: ScriptLanguage;
    functionName: string;
    functionArgs: string[];
    functionHelpId: string;
    functionHelpPopupStyle: Record<string, string>;
    dialogTitle: string;
    private currentOriginalMsg;
    constructor(store: Store<AppState>, router: Router, dialogRef: MatDialogRef<ConverterTestDialogComponent, string>, data: ConverterTestDialogData, errorStateMatcher: ErrorStateMatcher, fb: FormBuilder, wl: WhiteLabelingService, converterService: ConverterService, destroyRef: DestroyRef, popoverService: TbPopoverService, renderer: Renderer2, viewContainerRef: ViewContainerRef);
    private initConstant;
    private init;
    private prepareStringContent;
    private convertContent;
    private updateInputContent;
    ngAfterViewInit(): void;
    private initSplitLayout;
    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;
    cancel(): void;
    test(): void;
    updateMsg($event: Event, matButton: MatButton): void;
    private testConverter;
    private checkInputParamErrors;
    save(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConverterTestDialogComponent, [null, null, null, null, { skipSelf: true; }, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ConverterTestDialogComponent, "tb-converter-test-dialog", never, {}, {}, never, never, false, never>;
}
