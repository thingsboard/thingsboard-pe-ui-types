import { AfterViewInit, ChangeDetectorRef, DestroyRef, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { WidgetContext } from '@home/models/widget-component.models';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { SchedulerEventMode, SchedulerEventWithCustomerInfo } from '@shared/models/scheduler-event.models';
import { CollectionViewer, DataSource, SelectionModel } from '@angular/cdk/collections';
import { BehaviorSubject, Observable } from 'rxjs';
import { PageData } from '@shared/models/page/page-data';
import { PageLink } from '@shared/models/page/page-link';
import { SchedulerEventService } from '@core/http/scheduler-event.service';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { TranslateService } from '@ngx-translate/core';
import { MatDialog } from '@angular/material/dialog';
import { SchedulerEventConfigType } from '@home/components/scheduler/scheduler-event-config.models';
import { DialogService } from '@core/services/dialog.service';
import { FullCalendarComponent } from '@fullcalendar/angular';
import { schedulerCalendarView } from '@home/components/scheduler/scheduler-events.models';
import { CalendarOptions } from '@fullcalendar/core';
import { MatMenuTrigger } from '@angular/material/menu';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder } from '@angular/forms';
import { WidgetComponent } from '@home/components/widget/widget.component';
import { MatButton } from '@angular/material/button';
import { TbPopoverService } from '@shared/components/popover.service';
import { CustomTranslatePipe } from '@shared/pipe/custom-translate.pipe';
import * as i0 from "@angular/core";
export declare class SchedulerEventsComponent extends PageComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    store: Store<AppState>;
    private customTranslatePipe;
    private translate;
    private schedulerEventService;
    private userPermissionsService;
    private dialogService;
    private dialog;
    private router;
    private route;
    private cd;
    private fb;
    private zone;
    private renderer;
    private popoverService;
    private viewContainerRef;
    private destroyRef;
    widgetComponent: WidgetComponent;
    schedulerEventWidgetContainerRef: ElementRef;
    searchInputField: ElementRef;
    paginator: MatPaginator;
    sort: MatSort;
    calendarContainer: ElementRef<HTMLElement>;
    set calendarComponent(comp: FullCalendarComponent);
    schedulerEventMenuTrigger: MatMenuTrigger;
    widgetMode: boolean;
    ctx: WidgetContext;
    edgeId: string;
    authUser: import("../../../../shared/public-api").AuthUser;
    editEnabled: boolean;
    vcEnabled: boolean;
    addEnabled: boolean;
    deleteEnabled: boolean;
    showData: boolean;
    enabledViews: 'both' | 'list' | 'calendar';
    mode: SchedulerEventMode;
    displayPagination: boolean;
    pageSizeOptions: Array<number>;
    defaultPageSize: number;
    defaultSortOrder: string;
    defaultEventType: string;
    hidePageSize: boolean;
    noDataDisplayMessageText: any;
    displayedColumns: string[];
    pageLink: PageLink;
    textSearchMode: boolean;
    assignEnabled: boolean;
    dataSource: SchedulerEventsDatasource;
    isCalendarInitialized: BehaviorSubject<boolean>;
    currentCalendarView: schedulerCalendarView;
    schedulerCalendarViews: schedulerCalendarView[];
    schedulerCalendarViewTranslations: Map<schedulerCalendarView, string>;
    schedulerEventMenuPosition: {
        x: string;
        y: string;
    };
    schedulerContextMenuEvent: MouseEvent;
    calendarOptions: CalendarOptions;
    textSearch: import("@angular/forms").FormControl<string>;
    currentCalendarViewValue: string;
    schedulerEventConfigTypes: {
        [eventType: string]: SchedulerEventConfigType;
    };
    initialCalendarDate: Date | null;
    private calendarApi;
    private schedulerEvents;
    private componentResize$;
    private backNavigationCommands?;
    private modeHandler;
    constructor(store: Store<AppState>, customTranslatePipe: CustomTranslatePipe, translate: TranslateService, schedulerEventService: SchedulerEventService, userPermissionsService: UserPermissionsService, dialogService: DialogService, dialog: MatDialog, router: Router, route: ActivatedRoute, cd: ChangeDetectorRef, fb: FormBuilder, zone: NgZone, renderer: Renderer2, popoverService: TbPopoverService, viewContainerRef: ViewContainerRef, destroyRef: DestroyRef, widgetComponent: WidgetComponent);
    ngOnInit(): void;
    private setupResizeObserver;
    private setupCalendarOptions;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    private setupTextSearchSubscription;
    private setupSortAndPaginatorSubscriptions;
    onEditModeChanged(): void;
    displayBackButton(): boolean;
    goBack(): void;
    resize(): void;
    updateMode(mode: SchedulerEventMode, updateRouterQueryParams?: boolean): void;
    updateData(): void;
    enterFilterMode(): void;
    exitFilterMode(): void;
    reloadSchedulerEvents(): void;
    deleteSchedulerEvent($event: Event, schedulerEvent: SchedulerEventWithCustomerInfo): void;
    deleteSchedulerEvents($event: Event): void;
    addSchedulerEvent($event: Event): void;
    assignToEdgeSchedulerEvent($event: Event): void;
    editSchedulerEvent($event: Event, schedulerEventWithCustomerInfo: SchedulerEventWithCustomerInfo): void;
    viewSchedulerEvent($event: Event, schedulerEventWithCustomerInfo: SchedulerEventWithCustomerInfo): void;
    private openSchedulerEventDialog;
    private openAssignSchedulerEventToEdgeDialog;
    changeCalendarView(calendarView?: schedulerCalendarView, updateRouterQueryParams?: boolean): void;
    private updateCalendarDate;
    calendarViewTitle(): string;
    gotoCalendarToday(): void;
    isCalendarToday(): boolean;
    gotoCalendarPrev(): void;
    gotoCalendarNext(): void;
    gotoCalendarDate(date: number): void;
    private isDateInView;
    private onEventClick;
    private openSchedulerEventContextMenu;
    onSchedulerEventContextMenuMouseLeave(): void;
    private onDayClick;
    private onEventDrop;
    private onEventDidMount;
    private moveEvent;
    private eventSourceFunction;
    private toCalendarEvent;
    private eventInfo;
    unassignFromEdge($event: Event, schedulerEvent: SchedulerEventWithCustomerInfo): void;
    unassignFromEdgeSchedulerEvents($event: Event): void;
    isEnabled(schedulerEventWithCustomerInfo: SchedulerEventWithCustomerInfo): boolean;
    enableSchedulerEvent($event: Event, schedulerEvent: SchedulerEventWithCustomerInfo): void;
    toggleVersionControl($event: Event, scheduled: SchedulerEventWithCustomerInfo, versionControlButton: MatButton): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SchedulerEventsComponent, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SchedulerEventsComponent, "tb-scheduler-events", never, { "widgetMode": { "alias": "widgetMode"; "required": false; }; "ctx": { "alias": "ctx"; "required": false; }; "edgeId": { "alias": "edgeId"; "required": false; }; }, {}, never, never, false, never>;
}
declare class SchedulerEventsDatasource implements DataSource<SchedulerEventWithCustomerInfo> {
    private schedulerEventService;
    private schedulerEventConfigTypes;
    private entitiesSubject;
    private pageDataSubject;
    pageData$: Observable<PageData<SchedulerEventWithCustomerInfo>>;
    selection: SelectionModel<SchedulerEventWithCustomerInfo>;
    dataLoading: boolean;
    edgeId: string;
    constructor(schedulerEventService: SchedulerEventService, schedulerEventConfigTypes: {
        [eventType: string]: SchedulerEventConfigType;
    });
    connect(_collectionViewer: CollectionViewer): Observable<SchedulerEventWithCustomerInfo[] | ReadonlyArray<SchedulerEventWithCustomerInfo>>;
    disconnect(_collectionViewer: CollectionViewer): void;
    reset(): void;
    loadEntities(pageLink: PageLink, eventType: string): void;
    getEntities(eventType: string, pageLink: PageLink): Observable<PageData<SchedulerEventWithCustomerInfo>>;
    isAllSelected(): Observable<boolean>;
    isEmpty(): Observable<boolean>;
    total(): Observable<number>;
    masterToggle(): void;
}
export {};
