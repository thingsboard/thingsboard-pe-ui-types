import { AfterViewInit, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup, ValidationErrors, Validator } from '@angular/forms';
import { Store } from '@ngrx/store';
import { AppState } from '@app/core/core.state';
import { EntityType } from '@shared/models/entity-type.models';
import { PageComponent } from '@shared/components/page.component';
import { ReportConfig, ReportTemplateType } from '@shared/models/report.models';
import { NotificationType } from '@shared/models/notification.models';
import { MatDialog } from '@angular/material/dialog';
import { MatButton } from '@angular/material/button';
import * as i0 from "@angular/core";
export declare class ReportConfigComponent extends PageComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy, Validator {
    protected store: Store<AppState>;
    private dialog;
    private fb;
    private modelValue;
    reportConfigFormGroup: UntypedFormGroup;
    disabled: boolean;
    authUser: import("../../../../../shared/public-api").AuthUser;
    entityType: typeof EntityType;
    ReportTemplateType: typeof ReportTemplateType;
    NotificationType: typeof NotificationType;
    private destroy$;
    private propagateChange;
    constructor(store: Store<AppState>, dialog: MatDialog, fb: UntypedFormBuilder);
    registerOnChange(fn: any): void;
    registerOnTouched(_fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: ReportConfig | null): void;
    validate(): ValidationErrors | null;
    createTarget($event: Event, button: MatButton): void;
    private updateEnabledState;
    private createDefaultReportConfig;
    private updateModel;
    static ɵfac: i0.ɵɵFactoryDeclaration<ReportConfigComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ReportConfigComponent, "tb-report-config", never, { "disabled": { "alias": "disabled"; "required": false; }; }, {}, never, never, false, never>;
}
