import { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { PageLink } from '@shared/models/page/page-link';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { TranslateService } from '@ngx-translate/core';
import { MatDialog } from '@angular/material/dialog';
import { DialogService } from '@core/services/dialog.service';
import { EntityRelationService } from '@core/http/entity-relation.service';
import { EntityRelation, EntityRelationInfo, EntitySearchDirection } from '@shared/models/relation.models';
import { EntityId } from '@shared/models/id/entity-id';
import { RelationsDatasource } from '../../models/datasource/relation-datasource';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { FormBuilder } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class RelationTableComponent extends PageComponent implements AfterViewInit, OnInit, OnDestroy {
    protected store: Store<AppState>;
    private entityRelationService;
    translate: TranslateService;
    dialog: MatDialog;
    private userPermissionsService;
    private dialogService;
    private cd;
    private elementRef;
    private fb;
    directions: typeof EntitySearchDirection;
    directionTypes: string[];
    directionTypeTranslations: Map<EntitySearchDirection, string>;
    displayedColumns: string[];
    direction: EntitySearchDirection;
    pageLink: PageLink;
    hidePageSize: boolean;
    textSearchMode: boolean;
    dataSource: RelationsDatasource;
    activeValue: boolean;
    dirtyValue: boolean;
    entityIdValue: EntityId;
    viewsInited: boolean;
    set active(active: boolean);
    set entityId(entityId: EntityId);
    private readonlyValue;
    get readonly(): boolean;
    set readonly(value: boolean);
    searchInputField: ElementRef;
    paginator: MatPaginator;
    sort: MatSort;
    textSearch: import("@angular/forms").FormControl<string>;
    private widgetResize$;
    private destroy$;
    constructor(store: Store<AppState>, entityRelationService: EntityRelationService, translate: TranslateService, dialog: MatDialog, userPermissionsService: UserPermissionsService, dialogService: DialogService, cd: ChangeDetectorRef, elementRef: ElementRef, fb: FormBuilder);
    ngOnInit(): void;
    ngOnDestroy(): void;
    updateColumns(): void;
    directionChanged(direction: EntitySearchDirection): void;
    ngAfterViewInit(): void;
    updateData(reload?: boolean): void;
    enterFilterMode(): void;
    exitFilterMode(): void;
    resetSortAndFilter(update?: boolean): void;
    reloadRelations(): void;
    addRelation($event: Event): void;
    editRelation($event: Event, relation: EntityRelationInfo): void;
    showRelation($event: Event, relation: EntityRelationInfo): void;
    isRelationEditable(relation: EntityRelationInfo): boolean;
    onRowClick($event: Event, groupPermission: any): void;
    deleteRelation($event: Event, relation: EntityRelationInfo): void;
    deleteRelations($event: Event): void;
    openRelationDialog($event: Event, relation?: EntityRelation, readonly?: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RelationTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RelationTableComponent, "tb-relation-table", never, { "active": "active"; "entityId": "entityId"; "readonly": "readonly"; }, {}, never, never, false, never>;
}
