import { EntityTableConfig } from '@home/models/entity/entities-table-config.models';
import { TranslateService } from '@ngx-translate/core';
import { DatePipe } from '@angular/common';
import { MatDialog } from '@angular/material/dialog';
import { TimePageLink } from '@shared/models/page/page-link';
import { Observable } from 'rxjs';
import { PageData } from '@shared/models/page/page-data';
import { EntityId } from '@shared/models/id/entity-id';
import { AlarmInfo, AlarmsMode } from '@app/shared/models/alarm.models';
import { AlarmService } from '@app/core/http/alarm.service';
import { DialogService } from '@core/services/dialog.service';
import { UserPermissionsService } from '@core/http/user-permissions.service';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { UtilsService } from '@core/services/utils.service';
import { AlarmFilterConfig } from '@shared/models/query/query.models';
import { EntityService } from '@core/http/entity.service';
export declare class AlarmTableConfig extends EntityTableConfig<AlarmInfo, TimePageLink> {
    private alarmService;
    private entityService;
    private dialogService;
    private userPermissionsService;
    private translate;
    private datePipe;
    private dialog;
    private alarmsMode;
    entityId: EntityId;
    private defaultAlarmFilterConfig;
    private store;
    private viewContainerRef;
    private overlay;
    private cd;
    private utilsService;
    private writeEnabled;
    private removeEnabled;
    private authUser;
    alarmFilterConfig: AlarmFilterConfig;
    constructor(alarmService: AlarmService, entityService: EntityService, dialogService: DialogService, userPermissionsService: UserPermissionsService, translate: TranslateService, datePipe: DatePipe, dialog: MatDialog, alarmsMode: AlarmsMode, entityId: EntityId, defaultAlarmFilterConfig: AlarmFilterConfig, store: Store<AppState>, viewContainerRef: ViewContainerRef, overlay: Overlay, cd: ChangeDetectorRef, utilsService: UtilsService, writeEnabled: any, removeEnabled: any, pageMode?: boolean);
    fetchAlarms(pageLink: TimePageLink): Observable<PageData<AlarmInfo>>;
    showAlarmDetails(entity: AlarmInfo): void;
    getAssigneeTemplate(entity: AlarmInfo): string;
    getUserDisplayName(entity: AlarmInfo): string;
    getUserInitials(entity: AlarmInfo): string;
    getAvatarBgColor(entity: AlarmInfo): string;
    openAlarmAssigneePanel($event: Event, entity: AlarmInfo): void;
    ackAlarms($event: Event, alarms: Array<AlarmInfo>): void;
    clearAlarms($event: Event, alarms: Array<AlarmInfo>): void;
    deleteAlarms($event: Event, alarms: Array<AlarmInfo>): void;
}
