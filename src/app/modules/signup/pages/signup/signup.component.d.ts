import { AuthService } from '@core/auth/auth.service';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { PageComponent } from '@shared/components/page.component';
import { FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { SignupService } from '@core/http/signup.service';
import { DialogService } from '@core/services/dialog.service';
import { ReCaptcha2Component, ReCaptchaV3Service } from 'ngx-captcha';
import { SelfRegistrationService } from '@core/http/self-register.service';
import { WhiteLabelingService } from '@core/http/white-labeling.service';
import { MatDialog } from '@angular/material/dialog';
import * as i0 from "@angular/core";
export declare class SignupComponent extends PageComponent {
    protected store: Store<AppState>;
    private router;
    private authService;
    private signupService;
    wl: WhiteLabelingService;
    private selfRegistrationService;
    private dialogService;
    private translate;
    private reCaptchaV3Service;
    private dialog;
    private fb;
    recaptchaComponent: ReCaptcha2Component;
    signup: import("@angular/forms").FormGroup<{
        fields: import("@angular/forms").FormGroup<{
            EMAIL: import("@angular/forms").FormControl<string>;
            FIRST_NAME: import("@angular/forms").FormControl<string>;
            LAST_NAME: import("@angular/forms").FormControl<string>;
            PASSWORD: import("@angular/forms").FormControl<string>;
        }>;
        recaptchaResponse: import("@angular/forms").FormControl<string>;
    }>;
    passwordCheck: string;
    acceptPrivacyPolicy: boolean;
    acceptTermsOfUse: boolean;
    signupParams: import("../../../../shared/models/self-register.models").SignUpSelfRegistrationParams;
    class: string;
    constructor(store: Store<AppState>, router: Router, authService: AuthService, signupService: SignupService, wl: WhiteLabelingService, selfRegistrationService: SelfRegistrationService, dialogService: DialogService, translate: TranslateService, reCaptchaV3Service: ReCaptchaV3Service, dialog: MatDialog, fb: FormBuilder);
    signUp(): void;
    private executeSignup;
    private promptToResendEmailVerification;
    private validateSignUpRequest;
    openPrivacyPolicy($event: Event): void;
    openTermsOfUse($event: Event): void;
    private get emailToURLParam();
    static ɵfac: i0.ɵɵFactoryDeclaration<SignupComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SignupComponent, "tb-signup", never, {}, {}, never, never, false, never>;
}
